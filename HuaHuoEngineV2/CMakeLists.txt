macro(print_all_variables)
    message(STATUS "print_all_variables------------------------------------------{")
    get_cmake_property(_variableNames VARIABLES)
    foreach (_variableName ${_variableNames})
        message(STATUS "${_variableName}=${${_variableName}}")
    endforeach ()
    message(STATUS "print_all_variables------------------------------------------}")
endmacro()

cmake_minimum_required(VERSION 3.21)
project(HuaHuoEngineV2 VERSION 0.01)

set(HUAHUOENGINE_VERSION_MAJOR 0)
set(HUAHUOENGINE_VERSION_MINOR 0.1)
configure_file(Runtime/HuaHuoEngineConfig.h.in HuaHuoEngineConfig.h)

option(HuaHuoEditor "Compile HuaHuoEditor" ON)

if(${HuaHuoEditor} MATCHES "ON")
    add_compile_definitions(HUAHUO_EDITOR=1)
endif()

include_directories(src)
include_directories(external/baselib/builds)
include_directories(external/baselib/builds/Include)
include_directories(external/Umbra/source/common)
include_directories(external/Umbra/source)
include_directories(external/Umbra/interface)
include_directories(PlatformDependent/WebGL/Source/Threads)

list(APPEND CPPFILES external/baselib/builds/Source/Baselib_Timer.cpp)
list(APPEND CPPFILES Runtime/HuaHuoEngine.cpp)
list(APPEND CPPFILES Runtime/Components/Transform/Transform.cpp)
list(APPEND CPPFILES Runtime/Components/Transform/TransformHierarchy.cpp)
list(APPEND CPPFILES Runtime/Components/Transform/TransformChangeDispatch.cpp)
list(APPEND CPPFILES Runtime/TypeSystem/Object.cpp)
list(APPEND CPPFILES Runtime/TypeSystem/RTTI.cpp)
list(APPEND CPPFILES Runtime/TypeSystem/TypeManager.cpp)
list(APPEND CPPFILES Runtime/TypeSystem/Type.cpp)
list(APPEND CPPFILES Runtime/Utilities/HashFunctions/xxhash.c)
list(APPEND CPPFILES Runtime/Utilities/RegisterRuntimeInitializeAndCleanup.cpp)
list(APPEND CPPFILES Runtime/Utilities/Word.cpp)
list(APPEND CPPFILES Runtime/Utilities/Hash128.cpp)
list(APPEND CPPFILES Runtime/BaseClasses/GameObject.cpp)
list(APPEND CPPFILES Runtime/BaseClasses/ClassRegistration.cpp)
list(APPEND CPPFILES Runtime/BaseClasses/MessageIdentifier.cpp)
list(APPEND CPPFILES Runtime/BaseClasses/MessageHandler.cpp)
list(APPEND CPPFILES Runtime/BaseClasses/NamedObject.cpp)
list(APPEND CPPFILES Runtime/BaseClasses/GameManager.cpp)
list(APPEND CPPFILES Runtime/BaseClasses/ManagerContext.cpp)
list(APPEND CPPFILES Runtime/BaseClasses/IsPlaying.cpp)
list(APPEND CPPFILES Runtime/Components/BaseComponent.cpp)
list(APPEND CPPFILES Runtime/Serialize/PersistentManager.cpp)
list(APPEND CPPFILES Runtime/Serialize/PathNamePersistentManager.cpp)
list(APPEND CPPFILES Runtime/Serialize/Remapper.cpp)
list(APPEND CPPFILES Runtime/Serialize/SerializedFile.cpp)
list(APPEND CPPFILES Runtime/Serialize/TransferFunctions/StreamedBinaryRead.cpp)
list(APPEND CPPFILES Runtime/Serialize/TransferFunctions/StreamedBinaryWrite.cpp)
list(APPEND CPPFILES Runtime/Serialize/TransferFunctions/TransferBase.cpp)
list(APPEND CPPFILES Runtime/Serialize/TransferFunctions/RemapPPtrTransfer.cpp)
list(APPEND CPPFILES Runtime/Serialize/SerializationCaching/CacheWriterBase.cpp)
list(APPEND CPPFILES Runtime/Serialize/SerializationCaching/CacheReaderBase.cpp)
list(APPEND CPPFILES Runtime/Serialize/SerializationCaching/CachedReader.cpp)
list(APPEND CPPFILES Runtime/Serialize/SerializationCaching/CachedWriter.cpp)
list(APPEND CPPFILES Runtime/Serialize/SerializationCaching/MemoryCacherReadBlocks.cpp)
list(APPEND CPPFILES Runtime/Export/Scripting/GameObjectExport.cpp)
list(APPEND CPPFILES Runtime/Containers/CommonString.cpp)
list(APPEND CPPFILES Runtime/Containers/GrowableBuffer.cpp)
list(APPEND CPPFILES Runtime/Math/Simd/vec-svd.cpp)
list(APPEND CPPFILES Runtime/Math/Quaternionf.cpp)
list(APPEND CPPFILES Runtime/Math/Vector3f.cpp)
list(APPEND CPPFILES Runtime/Math/Vector4f.cpp)
list(APPEND CPPFILES Runtime/Math/Vector2f.cpp)
list(APPEND CPPFILES Runtime/Math/Matrix3x3.cpp)
list(APPEND CPPFILES Runtime/Math/Matrix4x4.cpp)
list(APPEND CPPFILES Runtime/Math/Matrix4x4_REF.cpp)
list(APPEND CPPFILES Runtime/Math/FloatConversion.cpp)
list(APPEND CPPFILES Runtime/Misc/GameObjectUtility.cpp)
list(APPEND CPPFILES Runtime/Logging/LogAssert.cpp)
list(APPEND CPPFILES Runtime/Memory/MemoryMacros.cpp)
list(APPEND CPPFILES Runtime/Memory/BatchAllocator.cpp)
list(APPEND CPPFILES Runtime/Memory/MemoryManager.cpp)
list(APPEND CPPFILES Runtime/SceneManager/HuaHuoScene.cpp)
list(APPEND CPPFILES Runtime/SceneManager/SceneManager.cpp)
list(APPEND CPPFILES Runtime/Export/Events/ScriptEventManager.cpp)
list(APPEND CPPFILES Runtime/GameCode/Behaviour.cpp)
list(APPEND CPPFILES Runtime/Input/TimeManager.cpp)
list(APPEND CPPFILES Runtime/Input/TargetFrameRate.cpp)
list(APPEND CPPFILES Runtime/Shaders/ShaderPassContext.cpp)
list(APPEND CPPFILES Runtime/Shaders/ShaderPropertySheet.cpp)
list(APPEND CPPFILES Runtime/Profiler/TimeHelper.cpp)
list(APPEND CPPFILES external/baselib/builds/Source/Assert.cpp)
list(APPEND CPPFILES Runtime/BaseClasses/ManagerContextLoading.cpp)
list(APPEND CPPFILES Runtime/Shaders/ShaderTags.cpp)
list(APPEND CPPFILES Runtime/Job/Jobs.cpp)
list(APPEND CPPFILES Runtime/Job/JobBatchDispatcher.cpp)
list(APPEND CPPFILES Runtime/Geometry/AABB.cpp)
list(APPEND CPPFILES Runtime/Geometry/BoundingUtils.cpp)
list(APPEND CPPFILES Runtime/Geometry/Intersection.cpp)
list(APPEND CPPFILES Runtime/Geometry/TriTriIntersect.cpp)
list(APPEND CPPFILES Runtime/Job/BlockRangeJob.cpp)
list(APPEND CPPFILES Runtime/Utilities/EnumTraits.cpp)
list(APPEND CPPFILES Runtime/Editor/SceneView.cpp)
list(APPEND CPPFILES src/ObjectStore.cpp)
list(APPEND CPPFILES src/Shapes/BaseShape.cpp)
list(APPEND CPPFILES src/Shapes/LineShape.cpp)
list(APPEND CPPFILES Runtime/Serialize/SerializationCaching/FileCacherRead.cpp)
list(APPEND CPPFILES Runtime/Serialize/SerializationCaching/FileCacherWrite.cpp)
list(APPEND CPPFILES Runtime/Utilities/File.cpp)
list(APPEND CPPFILES Runtime/Utilities/PathNameUtility.cpp)
list(APPEND CPPFILES Runtime/Utilities/MemoryFileSystem.cpp)
list(APPEND CPPFILES Runtime/File/OpenFileCache.cpp)
list(APPEND CPPFILES Runtime/File/AsyncReadManagerSimple.cpp)
list(APPEND CPPFILES Runtime/Serialize/AwakeFromLoadQueue.cpp)
list(APPEND CPPFILES src/Shapes/CircleShape.cpp)
list(APPEND CPPFILES src/Layer.cpp)
list(APPEND CPPFILES src/TimeLineCellManager.cpp)
list(APPEND CPPFILES src/KeyFrames/FrameState.cpp)
list(APPEND CPPFILES src/KeyFrames/ShapeTransformFrameState.cpp)
list(APPEND CPPFILES src/KeyFrames/ShapeColorFrameState.cpp)
list(APPEND CPPFILES Runtime/Utilities/HashFunctions/SpookyV2.cpp)
list(APPEND CPPFILES Runtime/Utilities/HashFunctions.cpp)
list(APPEND CPPFILES Runtime/Utilities/GUID.cpp)
list(APPEND CPPFILES Runtime/Math/Random/rand.cpp)
list(APPEND CPPFILES src/KeyFrames/ShapeSegmentFrameState.cpp)
list(APPEND CPPFILES src/Shapes/RectangleShape.cpp)
list(APPEND CPPFILES src/Shapes/ImageShape.cpp)
list(APPEND CPPFILES src/Shapes/AudioShape.cpp)
list(APPEND CPPFILES src/Shapes/AbstractMediaShape.cpp)
list(APPEND CPPFILES src/Shapes/ElementShape.cpp)
list(APPEND CPPFILES src/CloneObject.cpp)
list(APPEND CPPFILES src/Shapes/TextShape.cpp)
list(APPEND CPPFILES  src/Shapes/CurveShape.cpp)
list(APPEND CPPFILES  src/KeyFrames/ShapeFollowCurveFrameState.cpp)
list(APPEND CPPFILES src/KeyFrames/CustomFrameState.cpp)
list(APPEND CPPFILES src/Shapes/MirrorShape.cpp)
list(APPEND CPPFILES src/KeyFrames/FieldShapeArray.cpp)

if(${HuaHuoEditor} MATCHES "ON")
    list(APPEND CPPFILES Runtime/Editor/SceneInspector.cpp)
    list(APPEND CPPFILES Runtime/Editor/Utility/SceneRootTransformArray.cpp)
endif()

set(CMAKE_CXX_STANDARD 23)
set(EXTRA_INCLUDE_DIR Runtime)

set(TARGETNAME HuaHuoEngineV2)

## Compile external dependencies
#add_subdirectory (external)

add_compile_options(-Wno-deprecated-enum-enum-conversion)

if (CMAKE_CXX_PLATFORM_ID STREQUAL "emscripten")
    add_compile_definitions(WEB_ENV=1)
    add_compile_definitions(PLATFORM_WEBGL=1)
    add_compile_options(--profiling)
    include_directories(PlatformDependent/WebGL/External/baselib/builds/Include)
    list(APPEND CPPFILES Runtime/HuaHuoEngineWrapper.cpp)
    list(APPEND CPPFILES PlatformDependent/WebGL/External/baselib/builds/Source/Baselib_Timer_Emscripten.cpp)
    list(APPEND CPPFILES src/main.cpp)

    add_link_options(--bind)
    add_link_options(--profiling)
    add_link_options(-sALLOW_MEMORY_GROWTH)
    add_executable(${TARGETNAME} ${CPPFILES})
else ()
    #    include_directories("C:\\Users\\vincentzhang\\OpenSource\\emsdk\\upstream\\emscripten\\system\\include\\")
    set(TARGETNAME TestHuaHuoEngine)

#    add_compile_definitions(PLATFORM_WIN=1)
    include_directories(PlatformDependent/Win/External/baselib/builds/Include)

    add_executable(TestHuaHuoEngine ${CPPFILES} test/main.cpp)

    target_link_libraries(TestHuaHuoEngine ${ALL_LIBS})
endif ()

include_directories("src")
include_directories("Runtime")
include_directories (${CMAKE_BINARY_DIR})

#find_package(JNI)
#if(JNI_FOUND)
#    set(JAVA_FILE "../../HuahuoBackend/app/src/main/java/online/huahuo/backend/hhenginejni/HuahuoEngineJNIInterface.java")
#    # Generate java header file
#    add_custom_command(OUTPUT online_huahuo_backend_hhenginejni_HuahuoEngineJNIInterface.h
#        COMMAND javac -h . ${JAVA_FILE}
#        VERBATIM )
#
#    include_directories("jni")
#    include_directories(${JNI_INCLUDE_DIRS})
#    # build the lib for backend
#    add_library(HuahuoEngineLib SHARED online_huahuo_backend_hhenginejni_HuahuoEngineJNIInterface.h  ${CPPFILES} ${JNI_LIBRARIES} jni/jniimpl.cpp)
#endif()

target_include_directories(${TARGETNAME} PUBLIC "${PROJECT_BINARY_DIR}" ${EXTRA_INCLUDE_DIR})