[NoDelete]
interface TimeLineCellManager{
    unsigned long GetSpanHead(unsigned long cellId);
    boolean IsSpanHead(unsigned long cellId);
    long GetCellSpan(unsigned long cellId);
    void MergeCells(unsigned long startCellId, unsigned long endCellId);
};


[NoDelete]
interface ScriptEventHandler{

};

[NoDelete]
interface ScriptEventHandlerArgs{

};

[NoDelete]
interface KeyFrameChangedEventHandlerArgs{
    Layer GetLayer();
    long GetFrameId();
};

[NoDelete]
interface LayerUpdatedEventHandlerArgs{
    Layer GetLayer();
};

[NoDelete]
interface ShapeRemovedEventHandlerArgs{
    Layer GetLayer();
    BaseShape GetShape();
};

[JSImplementation="ScriptEventHandler", NoDelete]
interface ScriptEventHandlerImpl{
    void ScriptEventHandlerImpl();
    void handleEvent(ScriptEventHandlerArgs args);
};

interface PersistentManager{
    static PersistentManager GetPersistentManager();
    long LoadFile(DOMString fName);
};

[NoDelete]
interface Layer{
    void AddShapeInternal(BaseShape newShape);
    long long GetShapeCount();
    BaseShape GetShapeAtIndex(long shapeIdx);
    void SetName(DOMString name);
    void SetCurrentFrame(long frameId);
    long GetCurrentFrame();
    DOMString GetName();
    TimeLineCellManager GetTimeLineCellManager();
    boolean IsKeyFrame(long frameId);

    void SetIsVisible(boolean isVisible);
    boolean GetIsVisible();

    void SetIsSelected(boolean isSelected);
    boolean GetIsSelected();

    ObjectStore GetObjectStore();
};

[NoDelete]
interface ObjectStore{
    Layer GetCurrentLayer();
    void SetCurrentLayer(Layer layer);
    Layer CreateLayer(DOMString trackId);
    unsigned long GetLayerCount();
    Layer GetLayer(unsigned long id);
    long GetMaxFrameId();
    long GetStoreId();
};

[NoDelete]
interface ObjectStoreManager{
    static ObjectStoreManager GetDefaultObjectStoreManager();
    ObjectStore GetCurrentStore();
    ObjectStore CreateStore();
    boolean SetDefaultStoreByIndex(long storeIdx);
    ObjectStore GetStoreById(long storeIdx);

    void SetCanvasWH(unsigned long canvasWidth, unsigned long canvasHeight);

    unsigned long GetCanvasWidth();

    unsigned long GetCanvasHeight();
};

[NoDelete]
interface ShapeLoadedEventArgs{
    BaseShape GetBaseShape();
};

[NoDelete]
interface Vector3f{
    attribute float x;
    attribute float y;
    attribute float z;
};

[NoDelete]
interface ColorRGBAf{
    attribute float r;
    attribute float g;
    attribute float b;
    attribute float a;
};

[NoDelete]
interface SegmentKeyFrame{
    long GetFrameId();
    long GetTotalSegments();
    Vector3f GetPosition(long segmentId);
    Vector3f GetHandleIn(long segmentId);
    Vector3f GetHandleOut(long segmentId);
};

[NoDelete]
interface AbstractFrameState{

};

[NoDelete]
interface ShapeFollowCurveFrameState{
    void RecordTargetShape(long frameId, BaseShape targetCurve);
    void RecordLengthRatio(long frameId, float lengthRatio);
    BaseShape GetTargetShape();
    float GetLengthRatio();
};

[NoDelete]
interface BaseShape{
    static BaseShape CreateShape(DOMString shapeName);

    // inherited from BaseShape
    DOMString GetTypeName();
    DOMString GetName();
    void SetName(DOMString name);

    void SetLocalPivotPosition(float x, float y, float z);
    void SetGlobalPivotPosition(float x, float y, float z);
    Vector3f GetGlobalPivotPosition();
    Vector3f GetLocalPivotPosition();

    AbstractFrameState GetFrameStateByName(DOMString frameStateName);

    float GetRotation();
    void SetRotation(float rotation);
    void SetScale(float xScale, float yScale, float zScale);
    Vector3f GetScale();

    void SetColor(float r, float g, float b, float a);
    void SetStrokeColor(float r, float g, float b, float a);
    ColorRGBAf GetColor();
    ColorRGBAf GetStrokeColor();

    Layer GetLayer();

    boolean IsVisible();
    void SetSegments(float[] segmentBuffer, long size);
    void SetSegmentsAtFrame(float[] segmentBuffer, long size, long keyFrameId);
    void RemoveSegment(long index);

    long GetSegmentKeyFrameCount();
    long GetSegmentCount();
    Vector3f GetSegmentPosition(long segmentId);
    Vector3f GetSegmentHandleIn(long segmentId);
    Vector3f GetSegmentHandleOut(long segmentId);
    SegmentKeyFrame GetSegmentKeyFrameAtKeyFrameIndex(long keyFrameIndex);

    long GetIndex();
    void SetIndex(long index);
    void SetStrokeWidth(float strokeWidth);
    float GetStrokeWidth();
    long GetBornFrameId();
};

[NoDelete]
interface LineShape{
    void SetStartPoint(float x, float y, float z);
    void SetEndPoint(float x, float y, float z);
    Vector3f GetStartPoint();
    Vector3f GetEndPoint();

    // inherited from BaseShape
    DOMString GetTypeName();
    DOMString GetName();
    void SetName(DOMString name);
    void SetLocalPivotPosition(float x, float y, float z);
    void SetGlobalPivotPosition(float x, float y, float z);
    Vector3f GetGlobalPivotPosition();
    Vector3f GetLocalPivotPosition();
    float GetRotation();
    void SetRotation(float rotation);
    void SetScale(float xScale, float yScale, float zScale);
    Vector3f GetScale();

    void SetColor(float r, float g, float b, float a);
    void SetStrokeColor(float r, float g, float b, float a);
    ColorRGBAf GetColor();
    ColorRGBAf GetStrokeColor();

    Layer GetLayer();
    boolean IsVisible();
    void SetSegments(float[] segmentBuffer, long size);
    void SetSegmentsAtFrame(float[] segmentBuffer, long size, long keyFrameId);
    void RemoveSegment(long index);

    long GetSegmentKeyFrameCount();
    long GetSegmentCount();
    Vector3f GetSegmentPosition(long segmentId);
    Vector3f GetSegmentHandleIn(long segmentId);
    Vector3f GetSegmentHandleOut(long segmentId);
    SegmentKeyFrame GetSegmentKeyFrameAtKeyFrameIndex(long keyFrameIndex);
    long GetIndex();
    void SetIndex(long index);
    void SetStrokeWidth(float strokeWidth);
    float GetStrokeWidth();
    long GetBornFrameId();
};

[NoDelete]
interface TextShape{
    void SetText(DOMString inText);
    DOMString GetText();

    // inherited from BaseShape
    DOMString GetTypeName();
    DOMString GetName();
    void SetName(DOMString name);
    void SetLocalPivotPosition(float x, float y, float z);
    void SetGlobalPivotPosition(float x, float y, float z);
    Vector3f GetGlobalPivotPosition();
    Vector3f GetLocalPivotPosition();
    float GetRotation();
    void SetRotation(float rotation);
    void SetScale(float xScale, float yScale, float zScale);
    Vector3f GetScale();

    void SetColor(float r, float g, float b, float a);
    void SetStrokeColor(float r, float g, float b, float a);
    ColorRGBAf GetColor();
    ColorRGBAf GetStrokeColor();

    Layer GetLayer();
    boolean IsVisible();
    void SetSegments(float[] segmentBuffer, long size);
    void SetSegmentsAtFrame(float[] segmentBuffer, long size, long keyFrameId);
    void RemoveSegment(long index);

    long GetSegmentKeyFrameCount();
    long GetSegmentCount();
    Vector3f GetSegmentPosition(long segmentId);
    Vector3f GetSegmentHandleIn(long segmentId);
    Vector3f GetSegmentHandleOut(long segmentId);
    SegmentKeyFrame GetSegmentKeyFrameAtKeyFrameIndex(long keyFrameIndex);
    long GetIndex();
    void SetIndex(long index);
    void SetStrokeWidth(float strokeWidth);
    float GetStrokeWidth();
    long GetBornFrameId();
};

[NoDelete]
interface RectangleShape{
    void SetStartPoint(float x, float y, float z);
    void SetEndPoint(float x, float y, float z);
    Vector3f GetStartPoint();
    Vector3f GetEndPoint();

    // inherited from BaseShape
    DOMString GetTypeName();
    DOMString GetName();
    void SetName(DOMString name);
    void SetLocalPivotPosition(float x, float y, float z);
    void SetGlobalPivotPosition(float x, float y, float z);
    Vector3f GetGlobalPivotPosition();
    Vector3f GetLocalPivotPosition();
    float GetRotation();
    void SetRotation(float rotation);
    void SetScale(float xScale, float yScale, float zScale);
    Vector3f GetScale();

    void SetColor(float r, float g, float b, float a);
    void SetStrokeColor(float r, float g, float b, float a);
    ColorRGBAf GetColor();
    ColorRGBAf GetStrokeColor();

    Layer GetLayer();
    boolean IsVisible();
    void SetSegments(float[] segmentBuffer, long size);
    void SetSegmentsAtFrame(float[] segmentBuffer, long size, long keyFrameId);
    void RemoveSegment(long index);

    long GetSegmentKeyFrameCount();
    long GetSegmentCount();
    Vector3f GetSegmentPosition(long segmentId);
    Vector3f GetSegmentHandleIn(long segmentId);
    Vector3f GetSegmentHandleOut(long segmentId);
    SegmentKeyFrame GetSegmentKeyFrameAtKeyFrameIndex(long keyFrameIndex);
    long GetIndex();
    void SetIndex(long index);
    void SetStrokeWidth(float strokeWidth);
    float GetStrokeWidth();
    long GetBornFrameId();
};

[NoDelete]
interface CircleShape{
    void SetCenter(float x, float y, float z);
    void SetRadius(float radius);
    Vector3f GetCenter();
    float GetRadius();

    // inherited from BaseShape
    DOMString GetTypeName();
    DOMString GetName();
    void SetName(DOMString name);
    void SetLocalPivotPosition(float x, float y, float z);
    void SetGlobalPivotPosition(float x, float y, float z);
    Vector3f GetGlobalPivotPosition();
    Vector3f GetLocalPivotPosition();
    float GetRotation();
    void SetRotation(float rotation);
    void SetScale(float xScale, float yScale, float zScale);
    Vector3f GetScale();

    void SetColor(float r, float g, float b, float a);
    void SetStrokeColor(float r, float g, float b, float a);
    ColorRGBAf GetColor();
    ColorRGBAf GetStrokeColor();

    Layer GetLayer();
    boolean IsVisible();
    void SetSegments(float[] segmentBuffer, long size);
    void SetSegmentsAtFrame(float[] segmentBuffer, long size, long keyFrameId);
    void RemoveSegment(long index);

    long GetSegmentKeyFrameCount();
    long GetSegmentCount();
    Vector3f GetSegmentPosition(long segmentId);
    Vector3f GetSegmentHandleIn(long segmentId);
    Vector3f GetSegmentHandleOut(long segmentId);
    SegmentKeyFrame GetSegmentKeyFrameAtKeyFrameIndex(long keyFrameIndex);
    long GetIndex();
    void SetIndex(long index);
    void SetStrokeWidth(float strokeWidth);
    float GetStrokeWidth();
    long GetBornFrameId();
};

[NoDelete]
interface AudioShape{

    // inherited from AbstractMediaShape
    octet GetDataAtIndex(long index);
    void LoadData(octet[] pData);
    long GetDataSize();
    void SetData(octet[] pData, long dataSize);
    void SetMimeType(DOMString type);
    DOMString GetMimeType();
    void SetFileName(DOMString fName);
    DOMString GetFileName();

    // inherited from BaseShape
    DOMString GetTypeName();
    DOMString GetName();
    void SetName(DOMString name);
    void SetLocalPivotPosition(float x, float y, float z);
    void SetGlobalPivotPosition(float x, float y, float z);
    Vector3f GetGlobalPivotPosition();
    Vector3f GetLocalPivotPosition();
    float GetRotation();
    void SetRotation(float rotation);
    void SetScale(float xScale, float yScale, float zScale);
    Vector3f GetScale();

    void SetColor(float r, float g, float b, float a);
    void SetStrokeColor(float r, float g, float b, float a);
    ColorRGBAf GetColor();
    ColorRGBAf GetStrokeColor();

    Layer GetLayer();
    boolean IsVisible();
    void SetSegments(float[] segmentBuffer, long size);
    void SetSegmentsAtFrame(float[] segmentBuffer, long size, long keyFrameId);
    void RemoveSegment(long index);

    long GetSegmentKeyFrameCount();
    long GetSegmentCount();
    Vector3f GetSegmentPosition(long segmentId);
    Vector3f GetSegmentHandleIn(long segmentId);
    Vector3f GetSegmentHandleOut(long segmentId);
    SegmentKeyFrame GetSegmentKeyFrameAtKeyFrameIndex(long keyFrameIndex);
    long GetIndex();
    void SetIndex(long index);
    void SetStrokeWidth(float strokeWidth);
    float GetStrokeWidth();
    long GetBornFrameId();
};

[NoDelete]
interface ImageShape{
    boolean GetIsAnimation();
    void SetIsAnimation(boolean isAnimation);

    // inherited from AbstractMediaShape
    octet GetDataAtIndex(long index);
    void LoadData(octet[] pData);
    long GetDataSize();
    void SetData(octet[] pData, long dataSize);
    void SetMimeType(DOMString type);
    DOMString GetMimeType();
    void SetFileName(DOMString fName);
    DOMString GetFileName();

    // inherited from BaseShape
    DOMString GetTypeName();
    DOMString GetName();
    void SetName(DOMString name);
    void SetLocalPivotPosition(float x, float y, float z);
    void SetGlobalPivotPosition(float x, float y, float z);
    Vector3f GetGlobalPivotPosition();
    Vector3f GetLocalPivotPosition();
    float GetRotation();
    void SetRotation(float rotation);
    void SetScale(float xScale, float yScale, float zScale);
    Vector3f GetScale();

    void SetColor(float r, float g, float b, float a);
    void SetStrokeColor(float r, float g, float b, float a);
    ColorRGBAf GetColor();
    ColorRGBAf GetStrokeColor();

    Layer GetLayer();
    boolean IsVisible();
    void SetSegments(float[] segmentBuffer, long size);
    void SetSegmentsAtFrame(float[] segmentBuffer, long size, long keyFrameId);
    void RemoveSegment(long index);

    long GetSegmentKeyFrameCount();
    long GetSegmentCount();
    Vector3f GetSegmentPosition(long segmentId);
    Vector3f GetSegmentHandleIn(long segmentId);
    Vector3f GetSegmentHandleOut(long segmentId);
    SegmentKeyFrame GetSegmentKeyFrameAtKeyFrameIndex(long keyFrameIndex);
    long GetIndex();
    void SetIndex(long index);
    void SetStrokeWidth(float strokeWidth);
    float GetStrokeWidth();
    long GetBornFrameId();
};

[NoDelete]
interface CurveShape{

    // inherited from BaseShape
    DOMString GetTypeName();
    DOMString GetName();
    void SetName(DOMString name);
    void SetLocalPivotPosition(float x, float y, float z);
    void SetGlobalPivotPosition(float x, float y, float z);
    Vector3f GetGlobalPivotPosition();
    Vector3f GetLocalPivotPosition();
    float GetRotation();
    void SetRotation(float rotation);
    void SetScale(float xScale, float yScale, float zScale);
    Vector3f GetScale();

    void SetColor(float r, float g, float b, float a);
    void SetStrokeColor(float r, float g, float b, float a);
    ColorRGBAf GetColor();
    ColorRGBAf GetStrokeColor();

    Layer GetLayer();
    boolean IsVisible();
    void SetSegments(float[] segmentBuffer, long size);
    void SetSegmentsAtFrame(float[] segmentBuffer, long size, long keyFrameId);
    void RemoveSegment(long index);

    long GetSegmentKeyFrameCount();
    long GetSegmentCount();
    Vector3f GetSegmentPosition(long segmentId);
    Vector3f GetSegmentHandleIn(long segmentId);
    Vector3f GetSegmentHandleOut(long segmentId);
    SegmentKeyFrame GetSegmentKeyFrameAtKeyFrameIndex(long keyFrameIndex);
    long GetIndex();
    void SetIndex(long index);
    void SetStrokeWidth(float strokeWidth);
    float GetStrokeWidth();
    long GetBornFrameId();
};

[NoDelete]
interface ElementShape{
    void SetStoreId(long storeId);
    long GetStoreId();

    // inherited from BaseShape
    DOMString GetTypeName();
    DOMString GetName();
    void SetName(DOMString name);
    void SetLocalPivotPosition(float x, float y, float z);
    void SetGlobalPivotPosition(float x, float y, float z);
    Vector3f GetGlobalPivotPosition();
    Vector3f GetLocalPivotPosition();
    float GetRotation();
    void SetRotation(float rotation);
    void SetScale(float xScale, float yScale, float zScale);
    Vector3f GetScale();

    void SetColor(float r, float g, float b, float a);
    void SetStrokeColor(float r, float g, float b, float a);
    ColorRGBAf GetColor();
    ColorRGBAf GetStrokeColor();

    Layer GetLayer();
    boolean IsVisible();
    void SetSegments(float[] segmentBuffer, long size);
    void SetSegmentsAtFrame(float[] segmentBuffer, long size, long keyFrameId);
    void RemoveSegment(long index);

    long GetSegmentKeyFrameCount();
    long GetSegmentCount();
    Vector3f GetSegmentPosition(long segmentId);
    Vector3f GetSegmentHandleIn(long segmentId);
    Vector3f GetSegmentHandleOut(long segmentId);
    SegmentKeyFrame GetSegmentKeyFrameAtKeyFrameIndex(long keyFrameIndex);
    long GetIndex();
    void SetIndex(long index);

    void SetStrokeWidth(float strokeWidth);
    float GetStrokeWidth();
    long GetBornFrameId();
};

interface HuaHuoEngine {
    static HuaHuoEngine GetInstance();
    static void InitEngine();
    void RegisterEvent(DOMString eventType, ScriptEventHandler handler);
    boolean IsEventRegistered(DOMString eventType);
    BaseShape CreateShape(DOMString shapeName);
    BaseShape DuplicateShape(BaseShape shape);
    void DestroyShape(BaseShape shape);
};