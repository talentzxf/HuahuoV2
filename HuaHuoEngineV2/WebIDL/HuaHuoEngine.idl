[NoDelete]
interface TimeLineCellManager{
    unsigned long GetSpanHead(unsigned long cellId);
    boolean IsSpanHead(unsigned long cellId);
    long GetCellSpan(unsigned long cellId);
    void MergeCells(unsigned long startCellId, unsigned long endCellId);
};


[NoDelete]
interface ScriptEventHandler{

};

[NoDelete]
interface ScriptEventHandlerArgs{

};

[NoDelete]
interface KeyFrameChangedEventHandlerArgs{
    Layer GetLayer();
    long GetFrameId();
};

[NoDelete]
interface LayerUpdatedEventHandlerArgs{
    Layer GetLayer();
};

[NoDelete]
interface ShapeRemovedEventHandlerArgs{
    Layer GetLayer();
    BaseShape GetShape();
};

[JSImplementation="ScriptEventHandler", NoDelete]
interface ScriptEventHandlerImpl{
    void ScriptEventHandlerImpl();
    void handleEvent(ScriptEventHandlerArgs args);
};

interface PersistentManager{
    static PersistentManager GetPersistentManager();
    long LoadFile(DOMString fName);
};

[NoDelete]
interface Layer{
    void AddShapeInternal(BaseShape newShape);
    long long GetShapeCount();
    BaseShape GetShapeAtIndex(long shapeIdx);
    void SetName(DOMString name);
    void SetCurrentFrame(long frameId);
    long GetCurrentFrame();
    [Const] DOMString GetName();
    TimeLineCellManager GetTimeLineCellManager();
    boolean IsKeyFrame(long frameId);

    void SetIsVisible(boolean isVisible);
    boolean GetIsVisible();

    void SetIsSelected(boolean isSelected);
    boolean GetIsSelected();

    ObjectStore GetObjectStore();

    void RemoveShape(BaseShape shape);
};

[NoDelete]
interface ObjectStore{
    Layer GetCurrentLayer();
    void SetCurrentLayer(Layer layer);
    Layer CreateLayer(DOMString trackId);
    unsigned long GetLayerCount();
    Layer GetLayer(unsigned long id);
    long GetMaxFrameId();
    [Const] DOMString GetStoreId();
    void SyncLayersInfo();
    void UpdateMaxFrameId(long frameId, optional boolean force);
};

[NoDelete]
interface ObjectStoreAddedEvent{
    ObjectStore GetStore();
};

[NoDelete]
interface ObjectStoreManager{
    static ObjectStoreManager GetDefaultObjectStoreManager();
    ObjectStore GetCurrentStore();
    ObjectStore CreateStore();
    boolean SetDefaultStoreByIndex([Const] DOMString storeIdx);
    ObjectStore GetStoreById([Const] DOMString storeIdx);

    void SetCanvasWH(unsigned long canvasWidth, unsigned long canvasHeight);

    unsigned long GetCanvasWidth();

    unsigned long GetCanvasHeight();
};

[NoDelete]
interface ShapeLoadedEventArgs{
    BaseShape GetBaseShape();
};

[NoDelete]
interface Vector2f{
    attribute float x;
    attribute float y;
};

[NoDelete]
interface Vector3f{
    attribute float x;
    attribute float y;
    attribute float z;
};

[NoDelete]
interface ColorRGBAf{
    attribute float r;
    attribute float g;
    attribute float b;
    attribute float a;
};

[NoDelete]
interface SegmentKeyFrame{
    long GetFrameId();
    long GetTotalSegments();
    Vector3f GetPosition(long segmentId);
    Vector3f GetHandleIn(long segmentId);
    Vector3f GetHandleOut(long segmentId);
};

[NoDelete]
interface AbstractFrameState{
    [Const] DOMString GetTypeName();
    void SetTypeName([Const] DOMString typeName);
    long GetKeyFrameCount();
    long GetKeyFrameAtIndex(long idx);
    void DeleteKeyFrame(long frameId);

    boolean ReverseKeyFrame(long startFrameId, long endFrameId, long currentFrameId);

    long GetSubComponentCount();
};

[NoDelete]
interface FieldShapeArray{
    boolean ContainShape(BaseShape shape);
    long GetShapeCount();
    BaseShape GetShape(long idx);
    void InsertShape(BaseShape shape);
    void DeleteShape(BaseShape shapePtr);
};

[NoDelete]
interface ColorStopEntry{
    long GetIdentifier();
    float GetValue();
    [Const] ColorRGBAf GetColor();
};

[NoDelete]
interface ColorStopArray{
    [Const] long GetColorStopCount();
    ColorStopEntry GetColorStop(long idx);
};

[NoDelete]
interface BinaryResourceWrapper{
    [Const] DOMString GetResourceName();
    [Const] DOMString GetMimeType();
    [Const] DOMString GetResourceMD5();
    octet GetDataAtIndex(long index);
    long GetDataSize();
};


[NoDelete]
interface CustomComponent{
    static CustomComponent CreateComponent([Const] DOMString componentName);
    long RegisterFloatValue([Const] DOMString fieldName, float initValue);
    long RegisterVector3Value([Const] DOMString fieldName, float x, float y, float z);
    long RegisterShapeArrayValue([Const] DOMString fieldName);
    long RegisterColorValue([Const] DOMString fieldName, float r, float g, float b, float a);
    long RegisterColorStopArrayValue([Const] DOMString fieldName);
    long RegisterSubcomponentArray([Const] DOMString fieldName);
    long RegisterBinaryResource([Const] DOMString fieldName);
    long RegisterStringValue([Const] DOMString fieldName, [Const] DOMString defaultValue);
    long RegisterBooleanValue([Const]  DOMString fieldName, boolean initValue);
    boolean IsFieldRegistered([Const] DOMString fieldName);

    CustomComponent GetSubComponentByIdx(long idx);
    CustomComponent GetSubComponentArrayByName([Const] DOMString fieldName);
    void AddSubComponent(CustomComponent pSubComponent);

    void CreateShapeArrayValue([Const] DOMString fieldName);
    FieldShapeArray GetShapeArrayValueForWrite([Const] DOMString fieldName);
    FieldShapeArray GetShapeArrayValue([Const] DOMString fieldName);

    void SetVector3Value([Const] DOMString fieldName, float x, float y, float z);
    Vector3f GetVector3Value([Const] DOMString fieldName);

    void SetBooleanValue([Const] DOMString fieldName, boolean value);
    boolean GetBooleanValue([Const] DOMString fieldName);

    void SetFloatValue([Const] DOMString fieldName, float value);
    float GetFloatValue([Const] DOMString fieldName);

    void SetColorValue([Const] DOMString fieldName, float r, float g, float b, float a);
    ColorRGBAf GetColorValue([Const] DOMString fieldName);

    ColorStopArray GetColorStopArray([Const] DOMString fieldName);
    long AddColorStop([Const] DOMString fieldName, float value, float r, float g, float b, float a);
    long AddColorStop([Const] DOMString fieldName, float value);
    void UpdateColorStop([Const] DOMString fieldName, long colorStopIdentifier, float value, float r, float g, float b, float a);
    void DeleteColorStop([Const] DOMString fieldName, long colorStopIdentifier);

    void SetBinaryResourceByMD5([Const] DOMString fieldName, [Const] DOMString resourceMD5);
    BinaryResourceWrapper GetBinaryResource([Const] DOMString fieldName);

    void SetStringValue([Const] DOMString fieldName, [Const] DOMString strValue);
    [Const] DOMString GetStringValue([Const] DOMString fieldName);

    KeyFrameCurve GetFloatKeyFrameCurve([Const] DOMString fieldName);
    KeyFrameCurve GetVectorKeyFrameCurve([Const] DOMString fieldName, long index);

    long GetFieldCount();
};

CustomComponent implements AbstractFrameState;

[NoDelete]
interface KeyFrameCurvePoint{
    float GetValue();
    long GetFrameId();
    Vector2f GetHandleIn();
    Vector2f GetHandleOut();
};

[NoDelete]
interface KeyFrameCurve{
    long GetTotalPoints();
    KeyFrameCurvePoint GetKeyFrameCurvePoint(long idx);
    void SetValue(long frameId, float value);
    void SetValueByIndex(long index, long frameId, float value);
};

[NoDelete]
interface EventGraphComponent{
    BaseShape GetShapeByNodeId(long nodeId);
    void AddNodeIdShapeMap(long nodeId, BaseShape shape);
};
EventGraphComponent implements CustomComponent;

[NoDelete]
interface ShapeFollowCurveFrameState{
    void RecordTargetShape(long frameId, BaseShape targetCurve);
    void RecordLengthRatio(long frameId, float lengthRatio);
    BaseShape GetTargetShape();
    float GetLengthRatio();
};

[NoDelete]
interface ShapeTransformComponent{

};
ShapeTransformComponent implements CustomComponent;

[NoDelete]
interface BaseShape{
    static BaseShape CreateShape(DOMString shapeName, boolean createDefaultComponents = true);

    ShapeTransformComponent GetTransform();

    // inherited from BaseShape
    void SetBornFrameId(long bornFrameId);
    void AddAnimationOffset(long offset);
    [Const] DOMString GetTypeName();
    [Const] DOMString GetName();
    void SetName(DOMString name);

    [Const] DOMString GetStoreId();

    void AddFrameState(AbstractFrameState frameState);

    void SetLocalPivotPosition(float x, float y, float z);
    void SetGlobalPivotPosition(float x, float y, float z);
    Vector3f GetGlobalPivotPosition();
    Vector3f GetLocalPivotPosition();

    long GetFrameStateCount();
    AbstractFrameState GetFrameState(long idx);

    AbstractFrameState GetFrameStateByTypeName([Const] DOMString frameStateName);

    float GetRotation();
    void SetRotation(float rotation);
    void SetScale(float xScale, float yScale, float zScale);
    Vector3f GetScale();

    Layer GetLayer(optional boolean returnDefaultIfNotExist );

    boolean IsVisible();
    void SetSegments(float[] segmentBuffer, long size);
    void SetSegmentsAtFrame(float[] segmentBuffer, long size, long keyFrameId);
    void RemoveSegment(long index);

    long GetSegmentKeyFrameCount();
    long GetSegmentCount();
    Vector3f GetSegmentPosition(long segmentId);
    Vector3f GetSegmentHandleIn(long segmentId);
    Vector3f GetSegmentHandleOut(long segmentId);
    SegmentKeyFrame GetSegmentKeyFrameAtKeyFrameIndex(long keyFrameIndex);

    long GetIndex();
    void SetIndex(long index);
    long GetBornFrameId();

    void SyncBornFrameIdWithComponents();
    void RefreshKeyFrameCache();
    long GetKeyFrameCount();
    long GetKeyFrameAtIdx(long idx);

    void SetRecordTransformationOfKeyFrame(boolean isRecordPosition);
    boolean GetRecordTransformationOfKeyFrame();
};

[NoDelete]
interface LineShape{
    void SetStartPoint(float x, float y, float z);
    void SetEndPoint(float x, float y, float z);
    Vector3f GetStartPoint();
    Vector3f GetEndPoint();
};

LineShape implements BaseShape;

[NoDelete]
interface MirrorShape{
    void SetStartPoint(float x, float y, float z);
    void SetEndPoint(float x, float y, float z);
    Vector3f GetStartPoint();
    Vector3f GetEndPoint();
};

MirrorShape implements BaseShape;

[NoDelete]
interface TextShape{
    void SetText(DOMString inText);
    DOMString GetText();
};

TextShape implements BaseShape;

[NoDelete]
interface RectangleShape{
    void SetStartPoint(float x, float y, float z);
    void SetEndPoint(float x, float y, float z);
    Vector3f GetStartPoint();
    Vector3f GetEndPoint();
};

RectangleShape implements BaseShape;

[NoDelete]
interface ParticleSystem{
    void SetStartPoint(float x, float y, float z);
    void SetEndPoint(float x, float y, float z);
    Vector3f GetStartPoint();
    Vector3f GetEndPoint();
};

ParticleSystem implements BaseShape;

[NoDelete]
interface CircleShape{
    void SetCenter(float x, float y, float z);
    void SetRadius(float radius);
    Vector3f GetCenter();
    float GetRadius();
};

CircleShape implements BaseShape;

[NoDelete]
interface AbstractMediaShape{
    octet GetDataAtIndex(long index);
    long GetDataSize();
    [Const] DOMString GetMimeType();
    void SetResourceByMD5([Const] DOMString resourceMD5);
    [Const] DOMString GetFileName();
    [Const] DOMString GetResourceMD5();
};

[NoDelete]
interface AudioShape{

};

AudioShape implements BaseShape;
AudioShape implements AbstractMediaShape;

[NoDelete]
interface ImageShape{
    boolean GetIsAnimation();
    void SetIsAnimation(boolean isAnimation);
};

ImageShape implements BaseShape;
ImageShape implements AbstractMediaShape;

[NoDelete]
interface CurveShape{
};

CurveShape implements BaseShape;

[NoDelete]
interface ElementShape{
    void SetElementStoreId([Const] DOMString storeId);
    [Const] DOMString GetElementStoreId();
};
ElementShape implements BaseShape;

[NoDelete]
interface NailShape{
    boolean AddShape(BaseShape targetShape, float localX, float localY, float localZ);
    Vector3f GetLocalPositionInShape(BaseShape targetShape);
    long GetShapeCount();
    BaseShape GetShapeAtIndex(long index);
};

NailShape implements BaseShape;

[NoDelete]
interface NailManager{
    static NailManager GetNailManager();
    boolean CheckDuplication(BaseShape shape1, BaseShape shape2);
    void RemoveNail(NailShape nail);

    long GetNailCount();
    NailShape GetNail(long index);
};

interface HuaHuoEngine {
    static HuaHuoEngine GetInstance();
    static void InitEngine();
    void RegisterEvent(DOMString eventType, ScriptEventHandler handler);
    boolean IsEventRegistered(DOMString eventType);
    BaseShape CreateShape(DOMString shapeName);
    BaseShape DuplicateShape(BaseShape shape);
    void DestroyShape(BaseShape shape);

    boolean IsBinaryResourceExist([Const] DOMString resourceMD5);
    // Return false, the resource has already been uploaded before.
    boolean LoadBinaryResource([Const] DOMString fileName,[Const] DOMString mimeType, octet[] pData, long dataSize);
};
