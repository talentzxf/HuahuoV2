[NoDelete]
interface TimeLineCellManager{
    unsigned long GetSpanHead(unsigned long cellId);
    boolean IsSpanHead(unsigned long cellId);
    long GetCellSpan(unsigned long cellId);
    void MergeCells(unsigned long startCellId, unsigned long endCellId);
};


[NoDelete]
interface ScriptEventHandler{

};

[NoDelete]
interface ScriptEventHandlerArgs{

};

[NoDelete]
interface KeyFrameAddedEventHandlerArgs{
    Layer GetLayer();
    long GetFrameId();
};

[JSImplementation="ScriptEventHandler", NoDelete]
interface ScriptEventHandlerImpl{
    void ScriptEventHandlerImpl();
    void handleEvent(ScriptEventHandlerArgs args);
};

interface PersistentManager{
    static PersistentManager GetPersistentManager();
    long LoadFile(DOMString fName);
};

[NoDelete]
interface Layer{
    void AddShapeInternal(BaseShape newShape);
    long long GetShapeCount();
    void SetName(DOMString name);
    void SetCurrentFrame(long frameId);
    DOMString GetName();
    TimeLineCellManager GetTimeLineCellManager();

    boolean IsKeyFrame(long frameId);
};

[NoDelete]
interface ObjectStore{
    Layer GetCurrentLayer();
    Layer CreateLayer(DOMString trackId);
    unsigned long GetLayerCount();
    Layer GetLayer(unsigned long id);
};

[NoDelete]
interface ObjectStoreManager{
    static ObjectStoreManager GetDefaultObjectStoreManager();
    ObjectStore GetCurrentStore();
};

[NoDelete]
interface ShapeLoadedEventArgs{
    BaseShape GetBaseShape();
};

[NoDelete]
interface Vector3f{
    attribute float x;
    attribute float y;
    attribute float z;
};

[NoDelete]
interface ColorRGBAf{
    attribute float r;
    attribute float g;
    attribute float b;
    attribute float a;
};

[NoDelete]
interface BaseShape{
    static BaseShape CreateShape(DOMString shapeName);
    DOMString GetName();

    void SetPosition(float x, float y, float z);
    Vector3f GetPosition();
    void SetScale(float xScale, float yScale, float zScale);
    Vector3f GetScale();

    void SetColor(float r, float g, float b, float a);
    ColorRGBAf GetColor();

    Layer GetLayer();

    boolean IsVisible();
};

[NoDelete]
interface LineShape{
    void SetStartPoint(float x, float y, float z);
    void SetEndPoint(float x, float y, float z);
    Vector3f GetStartPoint();
    Vector3f GetEndPoint();

    // inherited from BaseShape
    void SetPosition(float x, float y, float z);
    Vector3f GetPosition();
    void SetScale(float xScale, float yScale, float zScale);
    Vector3f GetScale();

    void SetColor(float r, float g, float b, float a);
    ColorRGBAf GetColor();

    Layer GetLayer();
    boolean IsVisible();
};

[NoDelete]
interface CircleShape{
    void SetCenter(float x, float y, float z);
    void SetRadius(float radius);
    Vector3f GetCenter();
    float GetRadius();

    // inherited from BaseShape
    void SetPosition(float x, float y, float z);
    Vector3f GetPosition();
    void SetScale(float xScale, float yScale, float zScale);
    Vector3f GetScale();

    void SetColor(float r, float g, float b, float a);
    ColorRGBAf GetColor();

    Layer GetLayer();
    boolean IsVisible();
};

interface HuaHuoEngine {
    static HuaHuoEngine GetInstance();
    static void InitEngine();
    void RegisterEvent(DOMString eventType, ScriptEventHandler handler);
    BaseShape CreateShape(DOMString shapeName);
};