"C:\Program Files\JetBrains\CLion 2021.3.4\bin\cmake\win\bin\cmake.exe" -DCMAKE_BUILD_TYPE=Debug "-DCMAKE_MAKE_PROGRAM=C:/Program Files/JetBrains/CLion 2021.3.4/bin/ninja/win/ninja.exe" -G Ninja C:\Users\vincentzhang\MyProjects\HuahuoV2\HuaHuoEngineV2
-- The C compiler identification is GNU 11.2.0
-- The CXX compiler identification is GNU 11.2.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/gcc.exe - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/g++.exe - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
CMake Warning (dev) at C:/Program Files/JetBrains/CLion 2021.3.4/bin/cmake/win/share/cmake-3.21/Modules/FindPackageHandleStandardArgs.cmake:438 (message):
  The package name passed to `find_package_handle_standard_args` (OpenGL)
  does not match the name of the calling package (OPENGL).  This can lead to
  problems in calling code that expects `find_package` result variables
  (e.g., `_FOUND`) to follow a certain pattern.
Call Stack (most recent call first):
  C:/Program Files/JetBrains/CLion 2021.3.4/bin/cmake/win/share/cmake-3.21/Modules/FindOpenGL.cmake:443 (FIND_PACKAGE_HANDLE_STANDARD_ARGS)
  CMakeLists.txt:147 (find_package)
This warning is for project developers.  Use -Wno-dev to suppress it.

-- Found OpenGL: opengl32   
-- print_all_variables------------------------------------------{
-- CMAKE_ADDR2LINE=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/addr2line.exe
-- CMAKE_AR=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/ar.exe
-- CMAKE_AR=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/ar.exe
-- CMAKE_AUTOGEN_ORIGIN_DEPENDS=ON
-- CMAKE_AUTOMOC_COMPILER_PREDEFINES=ON
-- CMAKE_AUTOMOC_MACRO_NAMES=Q_OBJECT;Q_GADGET;Q_NAMESPACE;Q_NAMESPACE_EXPORT
-- CMAKE_AUTOMOC_PATH_PREFIX=OFF
-- CMAKE_BASE_NAME=g++
-- CMAKE_BINARY_DIR=C:/Users/vincentzhang/MyProjects/HuahuoV2/HuaHuoEngineV2/cmake-build-debug
-- CMAKE_BUILD_TOOL=C:/Program Files/JetBrains/CLion 2021.3.4/bin/ninja/win/ninja.exe
-- CMAKE_BUILD_TYPE=Debug
-- CMAKE_C11_COMPILE_FEATURES=c_std_11;c_static_assert
-- CMAKE_C11_EXTENSION_COMPILE_OPTION=-std=gnu11
-- CMAKE_C11_STANDARD_COMPILE_OPTION=-std=c11
-- CMAKE_C11_STANDARD__HAS_FULL_SUPPORT=ON
-- CMAKE_C17_COMPILE_FEATURES=c_std_17
-- CMAKE_C17_EXTENSION_COMPILE_OPTION=-std=gnu17
-- CMAKE_C17_STANDARD_COMPILE_OPTION=-std=c17
-- CMAKE_C23_COMPILE_FEATURES=c_std_23
-- CMAKE_C23_EXTENSION_COMPILE_OPTION=-std=gnu2x
-- CMAKE_C23_STANDARD_COMPILE_OPTION=-std=c2x
-- CMAKE_C90_COMPILE_FEATURES=c_std_90;c_function_prototypes
-- CMAKE_C90_EXTENSION_COMPILE_OPTION=-std=gnu90
-- CMAKE_C90_STANDARD_COMPILE_OPTION=-std=c90
-- CMAKE_C90_STANDARD__HAS_FULL_SUPPORT=ON
-- CMAKE_C99_COMPILE_FEATURES=c_std_99;c_restrict;c_variadic_macros
-- CMAKE_C99_EXTENSION_COMPILE_OPTION=-std=gnu99
-- CMAKE_C99_STANDARD_COMPILE_OPTION=-std=c99
-- CMAKE_C99_STANDARD__HAS_FULL_SUPPORT=ON
-- CMAKE_CFG_INTDIR=.
-- CMAKE_COMMAND=C:/Program Files/JetBrains/CLion 2021.3.4/bin/cmake/win/bin/cmake.exe
-- CMAKE_COMPILER_IS_GNUCC=1
-- CMAKE_COMPILER_IS_GNUCXX=1
-- CMAKE_COMPILER_IS_MINGW=1
-- CMAKE_CPACK_COMMAND=C:/Program Files/JetBrains/CLion 2021.3.4/bin/cmake/win/bin/cpack.exe
-- CMAKE_CROSSCOMPILING=FALSE
-- CMAKE_CTEST_COMMAND=C:/Program Files/JetBrains/CLion 2021.3.4/bin/cmake/win/bin/ctest.exe
-- CMAKE_CURRENT_BINARY_DIR=C:/Users/vincentzhang/MyProjects/HuahuoV2/HuaHuoEngineV2/cmake-build-debug
-- CMAKE_CURRENT_LIST_DIR=C:/Users/vincentzhang/MyProjects/HuahuoV2/HuaHuoEngineV2
-- CMAKE_CURRENT_LIST_FILE=C:/Users/vincentzhang/MyProjects/HuahuoV2/HuaHuoEngineV2/CMakeLists.txt
-- CMAKE_CURRENT_SOURCE_DIR=C:/Users/vincentzhang/MyProjects/HuahuoV2/HuaHuoEngineV2
-- CMAKE_CXX11_COMPILE_FEATURES=cxx_std_11;cxx_alias_templates;cxx_alignas;cxx_alignof;cxx_attributes;cxx_auto_type;cxx_constexpr;cxx_decltype;cxx_decltype_incomplete_return_types;cxx_default_function_template_args;cxx_defaulted_functions;cxx_defaulted_move_initializers;cxx_delegating_constructors;cxx_deleted_functions;cxx_enum_forward_declarations;cxx_explicit_conversions;cxx_extended_friend_declarations;cxx_extern_templates;cxx_final;cxx_func_identifier;cxx_generalized_initializers;cxx_inheriting_constructors;cxx_inline_namespaces;cxx_lambdas;cxx_local_type_template_args;cxx_long_long_type;cxx_noexcept;cxx_nonstatic_member_init;cxx_nullptr;cxx_override;cxx_range_for;cxx_raw_string_literals;cxx_reference_qualified_functions;cxx_right_angle_brackets;cxx_rvalue_references;cxx_sizeof_member;cxx_static_assert;cxx_strong_enums;cxx_thread_local;cxx_trailing_return_types;cxx_unicode_literals;cxx_uniform_initialization;cxx_unrestricted_unions;cxx_user_literals;cxx_variadic_macros;cxx_variadic_templates
-- CMAKE_CXX11_EXTENSION_COMPILE_OPTION=-std=gnu++11
-- CMAKE_CXX11_STANDARD_COMPILE_OPTION=-std=c++11
-- CMAKE_CXX11_STANDARD__HAS_FULL_SUPPORT=ON
-- CMAKE_CXX14_COMPILE_FEATURES=cxx_std_14;cxx_aggregate_default_initializers;cxx_attribute_deprecated;cxx_binary_literals;cxx_contextual_conversions;cxx_decltype_auto;cxx_digit_separators;cxx_generic_lambdas;cxx_lambda_init_captures;cxx_relaxed_constexpr;cxx_return_type_deduction;cxx_variable_templates
-- CMAKE_CXX14_EXTENSION_COMPILE_OPTION=-std=gnu++14
-- CMAKE_CXX14_STANDARD_COMPILE_OPTION=-std=c++14
-- CMAKE_CXX14_STANDARD__HAS_FULL_SUPPORT=ON
-- CMAKE_CXX17_COMPILE_FEATURES=cxx_std_17
-- CMAKE_CXX17_EXTENSION_COMPILE_OPTION=-std=gnu++17
-- CMAKE_CXX17_STANDARD_COMPILE_OPTION=-std=c++17
-- CMAKE_CXX20_COMPILE_FEATURES=cxx_std_20
-- CMAKE_CXX20_EXTENSION_COMPILE_OPTION=-std=gnu++20
-- CMAKE_CXX20_STANDARD_COMPILE_OPTION=-std=c++20
-- CMAKE_CXX23_COMPILE_FEATURES=cxx_std_23
-- CMAKE_CXX23_EXTENSION_COMPILE_OPTION=-std=gnu++23
-- CMAKE_CXX23_STANDARD_COMPILE_OPTION=-std=c++23
-- CMAKE_CXX98_COMPILE_FEATURES=cxx_std_98;cxx_template_template_parameters
-- CMAKE_CXX98_EXTENSION_COMPILE_OPTION=-std=gnu++98
-- CMAKE_CXX98_STANDARD_COMPILE_OPTION=-std=c++98
-- CMAKE_CXX98_STANDARD__HAS_FULL_SUPPORT=ON
-- CMAKE_CXX_ABI_COMPILED=TRUE
-- CMAKE_CXX_ARCHIVE_APPEND=<CMAKE_AR> q <TARGET> <LINK_FLAGS> <OBJECTS>
-- CMAKE_CXX_ARCHIVE_APPEND_IPO="C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/gcc-ar.exe" r <TARGET> <LINK_FLAGS> <OBJECTS>
-- CMAKE_CXX_ARCHIVE_CREATE=<CMAKE_AR> qc <TARGET> <LINK_FLAGS> <OBJECTS>
-- CMAKE_CXX_ARCHIVE_CREATE_IPO="C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/gcc-ar.exe" cr <TARGET> <LINK_FLAGS> <OBJECTS>
-- CMAKE_CXX_ARCHIVE_FINISH=<CMAKE_RANLIB> <TARGET>
-- CMAKE_CXX_ARCHIVE_FINISH_IPO="C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/gcc-ranlib.exe" <TARGET>
-- CMAKE_CXX_BYTE_ORDER=LITTLE_ENDIAN
-- CMAKE_CXX_CL_SHOWINCLUDES_PREFIX=
-- CMAKE_CXX_COMPILER=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/g++.exe
-- CMAKE_CXX_COMPILER=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/g++.exe
-- CMAKE_CXX_COMPILER_ABI=
-- CMAKE_CXX_COMPILER_AR=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/gcc-ar.exe
-- CMAKE_CXX_COMPILER_AR=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/gcc-ar.exe
-- CMAKE_CXX_COMPILER_ARCHITECTURE_ID=
-- CMAKE_CXX_COMPILER_ARG1=
-- CMAKE_CXX_COMPILER_ENV_VAR=CXX
-- CMAKE_CXX_COMPILER_EXCLUDE=CC;aCC;xlC
-- CMAKE_CXX_COMPILER_FRONTEND_VARIANT=
-- CMAKE_CXX_COMPILER_ID=GNU
-- CMAKE_CXX_COMPILER_ID_PLATFORM_CONTENT=#define STRINGIFY_HELPER(X) #X
#define STRINGIFY(X) STRINGIFY_HELPER(X)

/* Identify known platforms by name.  */
#if defined(__linux) || defined(__linux__) || defined(linux)
# define PLATFORM_ID "Linux"

#elif defined(__MSYS__)
# define PLATFORM_ID "MSYS"

#elif defined(__CYGWIN__)
# define PLATFORM_ID "Cygwin"

#elif defined(__MINGW32__)
# define PLATFORM_ID "MinGW"

#elif defined(__APPLE__)
# define PLATFORM_ID "Darwin"

#elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)
# define PLATFORM_ID "Windows"

#elif defined(__FreeBSD__) || defined(__FreeBSD)
# define PLATFORM_ID "FreeBSD"

#elif defined(__NetBSD__) || defined(__NetBSD)
# define PLATFORM_ID "NetBSD"

#elif defined(__OpenBSD__) || defined(__OPENBSD)
# define PLATFORM_ID "OpenBSD"

#elif defined(__sun) || defined(sun)
# define PLATFORM_ID "SunOS"

#elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)
# define PLATFORM_ID "AIX"

#elif defined(__hpux) || defined(__hpux__)
# define PLATFORM_ID "HP-UX"

#elif defined(__HAIKU__)
# define PLATFORM_ID "Haiku"

#elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)
# define PLATFORM_ID "BeOS"

#elif defined(__QNX__) || defined(__QNXNTO__)
# define PLATFORM_ID "QNX"

#elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)
# define PLATFORM_ID "Tru64"

#elif defined(__riscos) || defined(__riscos__)
# define PLATFORM_ID "RISCos"

#elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)
# define PLATFORM_ID "SINIX"

#elif defined(__UNIX_SV__)
# define PLATFORM_ID "UNIX_SV"

#elif defined(__bsdos__)
# define PLATFORM_ID "BSDOS"

#elif defined(_MPRAS) || defined(MPRAS)
# define PLATFORM_ID "MP-RAS"

#elif defined(__osf) || defined(__osf__)
# define PLATFORM_ID "OSF1"

#elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)
# define PLATFORM_ID "SCO_SV"

#elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)
# define PLATFORM_ID "ULTRIX"

#elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)
# define PLATFORM_ID "Xenix"

#elif defined(__WATCOMC__)
# if defined(__LINUX__)
#  define PLATFORM_ID "Linux"

# elif defined(__DOS__)
#  define PLATFORM_ID "DOS"

# elif defined(__OS2__)
#  define PLATFORM_ID "OS2"

# elif defined(__WINDOWS__)
#  define PLATFORM_ID "Windows3x"

# elif defined(__VXWORKS__)
#  define PLATFORM_ID "VxWorks"

# else /* unknown platform */
#  define PLATFORM_ID
# endif

#elif defined(__INTEGRITY)
# if defined(INT_178B)
#  define PLATFORM_ID "Integrity178"

# else /* regular Integrity */
#  define PLATFORM_ID "Integrity"
# endif

#else /* unknown platform */
# define PLATFORM_ID

#endif

/* For windows compilers MSVC and Intel we can determine
   the architecture of the compiler being used.  This is because
   the compilers do not have flags that can change the architecture,
   but rather depend on which compiler is being used
*/
#if defined(_WIN32) && defined(_MSC_VER)
# if defined(_M_IA64)
#  define ARCHITECTURE_ID "IA64"

# elif defined(_M_ARM64EC)
#  define ARCHITECTURE_ID "ARM64EC"

# elif defined(_M_X64) || defined(_M_AMD64)
#  define ARCHITECTURE_ID "x64"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# elif defined(_M_ARM64)
#  define ARCHITECTURE_ID "ARM64"

# elif defined(_M_ARM)
#  if _M_ARM == 4
#   define ARCHITECTURE_ID "ARMV4I"
#  elif _M_ARM == 5
#   define ARCHITECTURE_ID "ARMV5I"
#  else
#   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)
#  endif

# elif defined(_M_MIPS)
#  define ARCHITECTURE_ID "MIPS"

# elif defined(_M_SH)
#  define ARCHITECTURE_ID "SHx"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__WATCOMC__)
# if defined(_M_I86)
#  define ARCHITECTURE_ID "I86"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# if defined(__ICCARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__ICCRX__)
#  define ARCHITECTURE_ID "RX"

# elif defined(__ICCRH850__)
#  define ARCHITECTURE_ID "RH850"

# elif defined(__ICCRL78__)
#  define ARCHITECTURE_ID "RL78"

# elif defined(__ICCRISCV__)
#  define ARCHITECTURE_ID "RISCV"

# elif defined(__ICCAVR__)
#  define ARCHITECTURE_ID "AVR"

# elif defined(__ICC430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__ICCV850__)
#  define ARCHITECTURE_ID "V850"

# elif defined(__ICC8051__)
#  define ARCHITECTURE_ID "8051"

# elif defined(__ICCSTM8__)
#  define ARCHITECTURE_ID "STM8"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__ghs__)
# if defined(__PPC64__)
#  define ARCHITECTURE_ID "PPC64"

# elif defined(__ppc__)
#  define ARCHITECTURE_ID "PPC"

# elif defined(__ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__x86_64__)
#  define ARCHITECTURE_ID "x64"

# elif defined(__i386__)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__TI_COMPILER_VERSION__)
# if defined(__TI_ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__MSP430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__TMS320C28XX__)
#  define ARCHITECTURE_ID "TMS320C28x"

# elif defined(__TMS320C6X__) || defined(_TMS320C6X)
#  define ARCHITECTURE_ID "TMS320C6x"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#else
#  define ARCHITECTURE_ID
#endif

/* Convert integer to decimal digit literals.  */
#define DEC(n)                   \
  ('0' + (((n) / 10000000)%10)), \
  ('0' + (((n) / 1000000)%10)),  \
  ('0' + (((n) / 100000)%10)),   \
  ('0' + (((n) / 10000)%10)),    \
  ('0' + (((n) / 1000)%10)),     \
  ('0' + (((n) / 100)%10)),      \
  ('0' + (((n) / 10)%10)),       \
  ('0' +  ((n) % 10))

/* Convert integer to hex digit literals.  */
#define HEX(n)             \
  ('0' + ((n)>>28 & 0xF)), \
  ('0' + ((n)>>24 & 0xF)), \
  ('0' + ((n)>>20 & 0xF)), \
  ('0' + ((n)>>16 & 0xF)), \
  ('0' + ((n)>>12 & 0xF)), \
  ('0' + ((n)>>8  & 0xF)), \
  ('0' + ((n)>>4  & 0xF)), \
  ('0' + ((n)     & 0xF))

/* Construct a string literal encoding the version number. */
#ifdef COMPILER_VERSION
char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";

/* Construct a string literal encoding the version number components. */
#elif defined(COMPILER_VERSION_MAJOR)
char const info_version[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
  COMPILER_VERSION_MAJOR,
# ifdef COMPILER_VERSION_MINOR
  '.', COMPILER_VERSION_MINOR,
#  ifdef COMPILER_VERSION_PATCH
   '.', COMPILER_VERSION_PATCH,
#   ifdef COMPILER_VERSION_TWEAK
    '.', COMPILER_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct a string literal encoding the internal version number. */
#ifdef COMPILER_VERSION_INTERNAL
char const info_version_internal[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','_',
  'i','n','t','e','r','n','a','l','[',
  COMPILER_VERSION_INTERNAL,']','\0'};
#elif defined(COMPILER_VERSION_INTERNAL_STR)
char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";
#endif

/* Construct a string literal encoding the version number components. */
#ifdef SIMULATE_VERSION_MAJOR
char const info_simulate_version[] = {
  'I', 'N', 'F', 'O', ':',
  's','i','m','u','l','a','t','e','_','v','e','r','s','i','o','n','[',
  SIMULATE_VERSION_MAJOR,
# ifdef SIMULATE_VERSION_MINOR
  '.', SIMULATE_VERSION_MINOR,
#  ifdef SIMULATE_VERSION_PATCH
   '.', SIMULATE_VERSION_PATCH,
#   ifdef SIMULATE_VERSION_TWEAK
    '.', SIMULATE_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";

-- CMAKE_CXX_COMPILER_ID_RUN=1
-- CMAKE_CXX_COMPILER_ID_TEST_FLAGS=-c;--c++;--ec++;--target=arm-arm-none-eabi -mcpu=cortex-m3;-c -I__does_not_exist__
-- CMAKE_CXX_COMPILER_ID_TOOL_MATCH_INDEX=2
-- CMAKE_CXX_COMPILER_ID_TOOL_MATCH_REGEX=
Ld[^
]*(
[ 	]+[^
]*)*
[ 	]+([^ 	
]+)[^
]*-o[^
]*CompilerIdCXX/(\./)?(CompilerIdCXX.(framework|xctest|build/[^ 	
]+)/)?CompilerIdCXX[ 	
\"]
-- CMAKE_CXX_COMPILER_ID_VENDORS=IAR
-- CMAKE_CXX_COMPILER_ID_VENDOR_REGEX_IAR=IAR .+ Compiler
-- CMAKE_CXX_COMPILER_INIT=NOTFOUND
-- CMAKE_CXX_COMPILER_LIST=c++;g++;cl;bcc;icpx;icx;clang++
-- CMAKE_CXX_COMPILER_LOADED=1
-- CMAKE_CXX_COMPILER_NAMES=c++
-- CMAKE_CXX_COMPILER_PREDEFINES_COMMAND=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/g++.exe;-dM;-E;-c;C:/Program Files/JetBrains/CLion 2021.3.4/bin/cmake/win/share/cmake-3.21/Modules/CMakeCXXCompilerABI.cpp
-- CMAKE_CXX_COMPILER_PRODUCED_FILES=a.exe
-- CMAKE_CXX_COMPILER_PRODUCED_OUTPUT=
-- CMAKE_CXX_COMPILER_RANLIB=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/gcc-ranlib.exe
-- CMAKE_CXX_COMPILER_RANLIB=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/gcc-ranlib.exe
-- CMAKE_CXX_COMPILER_SYSROOT=
-- CMAKE_CXX_COMPILER_VERSION=11.2.0
-- CMAKE_CXX_COMPILER_VERSION_INTERNAL=
-- CMAKE_CXX_COMPILER_WORKS=TRUE
-- CMAKE_CXX_COMPILER_WRAPPER=
-- CMAKE_CXX_COMPILE_FEATURES=cxx_std_98;cxx_template_template_parameters;cxx_std_11;cxx_alias_templates;cxx_alignas;cxx_alignof;cxx_attributes;cxx_auto_type;cxx_constexpr;cxx_decltype;cxx_decltype_incomplete_return_types;cxx_default_function_template_args;cxx_defaulted_functions;cxx_defaulted_move_initializers;cxx_delegating_constructors;cxx_deleted_functions;cxx_enum_forward_declarations;cxx_explicit_conversions;cxx_extended_friend_declarations;cxx_extern_templates;cxx_final;cxx_func_identifier;cxx_generalized_initializers;cxx_inheriting_constructors;cxx_inline_namespaces;cxx_lambdas;cxx_local_type_template_args;cxx_long_long_type;cxx_noexcept;cxx_nonstatic_member_init;cxx_nullptr;cxx_override;cxx_range_for;cxx_raw_string_literals;cxx_reference_qualified_functions;cxx_right_angle_brackets;cxx_rvalue_references;cxx_sizeof_member;cxx_static_assert;cxx_strong_enums;cxx_thread_local;cxx_trailing_return_types;cxx_unicode_literals;cxx_uniform_initialization;cxx_unrestricted_unions;cxx_user_literals;cxx_variadic_macros;cxx_variadic_templates;cxx_std_14;cxx_aggregate_default_initializers;cxx_attribute_deprecated;cxx_binary_literals;cxx_contextual_conversions;cxx_decltype_auto;cxx_digit_separators;cxx_generic_lambdas;cxx_lambda_init_captures;cxx_relaxed_constexpr;cxx_return_type_deduction;cxx_variable_templates;cxx_std_17;cxx_std_20;cxx_std_23
-- CMAKE_CXX_COMPILE_OBJECT=<CMAKE_CXX_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -o <OBJECT> -c <SOURCE>
-- CMAKE_CXX_COMPILE_OPTIONS_CREATE_PCH=-x;c++-header;-include;<PCH_HEADER>
-- CMAKE_CXX_COMPILE_OPTIONS_EXPLICIT_LANGUAGE=-x;c++
-- CMAKE_CXX_COMPILE_OPTIONS_INVALID_PCH=-Winvalid-pch
-- CMAKE_CXX_COMPILE_OPTIONS_IPO=-flto;-fno-fat-lto-objects
-- CMAKE_CXX_COMPILE_OPTIONS_SYSROOT=--sysroot=
-- CMAKE_CXX_COMPILE_OPTIONS_USE_PCH=-include;<PCH_HEADER>
-- CMAKE_CXX_COMPILE_OPTIONS_VISIBILITY=-fvisibility=
-- CMAKE_CXX_COMPILE_OPTIONS_VISIBILITY_INLINES_HIDDEN=-fno-keep-inline-dllexport
-- CMAKE_CXX_CREATE_ASSEMBLY_SOURCE=<CMAKE_CXX_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -S <SOURCE> -o <ASSEMBLY_SOURCE>
-- CMAKE_CXX_CREATE_PREPROCESSED_SOURCE=<CMAKE_CXX_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -E <SOURCE> > <PREPROCESSED_SOURCE>
-- CMAKE_CXX_CREATE_SHARED_LIBRARY=<CMAKE_CXX_COMPILER> <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> -o <TARGET> -Wl,--out-implib,<TARGET_IMPLIB> -Wl,--major-image-version,<TARGET_VERSION_MAJOR>,--minor-image-version,<TARGET_VERSION_MINOR> <OBJECTS> <LINK_LIBRARIES>
-- CMAKE_CXX_CREATE_SHARED_MODULE=<CMAKE_CXX_COMPILER> <CMAKE_SHARED_MODULE_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_MODULE_CREATE_CXX_FLAGS> -o <TARGET> -Wl,--major-image-version,<TARGET_VERSION_MAJOR>,--minor-image-version,<TARGET_VERSION_MINOR> <OBJECTS> <LINK_LIBRARIES>
-- CMAKE_CXX_CREATE_WIN32_EXE=-mwindows
-- CMAKE_CXX_FLAGS=
-- CMAKE_CXX_FLAGS_DEBUG=-g
-- CMAKE_CXX_FLAGS_DEBUG_INIT= -g
-- CMAKE_CXX_FLAGS_INIT=  
-- CMAKE_CXX_FLAGS_MINSIZEREL=-Os -DNDEBUG
-- CMAKE_CXX_FLAGS_MINSIZEREL_INIT= -Os -DNDEBUG
-- CMAKE_CXX_FLAGS_RELEASE=-O3 -DNDEBUG
-- CMAKE_CXX_FLAGS_RELEASE_INIT= -O3 -DNDEBUG
-- CMAKE_CXX_FLAGS_RELWITHDEBINFO=-O2 -g -DNDEBUG
-- CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT= -O2 -g -DNDEBUG
-- CMAKE_CXX_IGNORE_EXTENSIONS=inl;h;hpp;HPP;H;o;O;obj;OBJ;def;DEF;rc;RC
-- CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/lib/gcc/x86_64-w64-mingw32/11.2.0/include/c++;C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/lib/gcc/x86_64-w64-mingw32/11.2.0/include/c++/x86_64-w64-mingw32;C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/lib/gcc/x86_64-w64-mingw32/11.2.0/include/c++/backward;C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/lib/gcc/x86_64-w64-mingw32/11.2.0/include;C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/include;C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/lib/gcc/x86_64-w64-mingw32/11.2.0/include-fixed;C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/x86_64-w64-mingw32/include
-- CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/lib/gcc/x86_64-w64-mingw32/11.2.0;C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/lib/gcc;C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/x86_64-w64-mingw32/lib;C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/lib
-- CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES=
-- CMAKE_CXX_IMPLICIT_LINK_LIBRARIES=stdc++;mingw32;gcc_s;gcc;moldname;mingwex;kernel32;pthread;advapi32;shell32;user32;kernel32;iconv;mingw32;gcc_s;gcc;moldname;mingwex;kernel32
-- CMAKE_CXX_INFORMATION_LOADED=1
-- CMAKE_CXX_LIBRARY_ARCHITECTURE=
-- CMAKE_CXX_LINKER_PREFERENCE=30
-- CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES=1
-- CMAKE_CXX_LINKER_WRAPPER_FLAG=-Wl,
-- CMAKE_CXX_LINKER_WRAPPER_FLAG_SEP=,
-- CMAKE_CXX_LINK_EXECUTABLE=<CMAKE_CXX_COMPILER> <FLAGS> <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> -Wl,--out-implib,<TARGET_IMPLIB> -Wl,--major-image-version,<TARGET_VERSION_MAJOR>,--minor-image-version,<TARGET_VERSION_MINOR> <LINK_LIBRARIES>
-- CMAKE_CXX_OUTPUT_EXTENSION=.obj
-- CMAKE_CXX_PLATFORM_ID=MinGW
-- CMAKE_CXX_RESPONSE_FILE_LINK_FLAG=@
-- CMAKE_CXX_SIMULATE_ID=
-- CMAKE_CXX_SIMULATE_VERSION=
-- CMAKE_CXX_SIZEOF_DATA_PTR=8
-- CMAKE_CXX_SOURCE_FILE_EXTENSIONS=C;M;c++;cc;cpp;cxx;mm;mpp;CPP;ixx;cppm
-- CMAKE_CXX_STANDARD=23
-- CMAKE_CXX_STANDARD_COMPUTED_DEFAULT=17
-- CMAKE_CXX_STANDARD_DEFAULT=17
-- CMAKE_CXX_STANDARD_LIBRARIES=-lkernel32 -luser32 -lgdi32 -lwinspool -lshell32 -lole32 -loleaut32 -luuid -lcomdlg32 -ladvapi32
-- CMAKE_CXX_STANDARD_LIBRARIES_INIT=-lkernel32 -luser32 -lgdi32 -lwinspool -lshell32 -lole32 -loleaut32 -luuid -lcomdlg32 -ladvapi32
-- CMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES=1
-- CMAKE_CXX_USE_RESPONSE_FILE_FOR_LIBRARIES=1
-- CMAKE_CXX_USE_RESPONSE_FILE_FOR_OBJECTS=1
-- CMAKE_CXX_VERBOSE_FLAG=-v
-- CMAKE_CXX_XCODE_ARCHS=
-- CMAKE_C_ABI_COMPILED=TRUE
-- CMAKE_C_ARCHIVE_APPEND=<CMAKE_AR> q <TARGET> <LINK_FLAGS> <OBJECTS>
-- CMAKE_C_ARCHIVE_APPEND_IPO="C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/gcc-ar.exe" r <TARGET> <LINK_FLAGS> <OBJECTS>
-- CMAKE_C_ARCHIVE_CREATE=<CMAKE_AR> qc <TARGET> <LINK_FLAGS> <OBJECTS>
-- CMAKE_C_ARCHIVE_CREATE_IPO="C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/gcc-ar.exe" cr <TARGET> <LINK_FLAGS> <OBJECTS>
-- CMAKE_C_ARCHIVE_FINISH=<CMAKE_RANLIB> <TARGET>
-- CMAKE_C_ARCHIVE_FINISH_IPO="C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/gcc-ranlib.exe" <TARGET>
-- CMAKE_C_BYTE_ORDER=LITTLE_ENDIAN
-- CMAKE_C_CL_SHOWINCLUDES_PREFIX=
-- CMAKE_C_COMPILER=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/gcc.exe
-- CMAKE_C_COMPILER=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/gcc.exe
-- CMAKE_C_COMPILER_ABI=
-- CMAKE_C_COMPILER_AR=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/gcc-ar.exe
-- CMAKE_C_COMPILER_AR=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/gcc-ar.exe
-- CMAKE_C_COMPILER_ARCHITECTURE_ID=
-- CMAKE_C_COMPILER_ARG1=
-- CMAKE_C_COMPILER_ENV_VAR=CC
-- CMAKE_C_COMPILER_FRONTEND_VARIANT=
-- CMAKE_C_COMPILER_ID=GNU
-- CMAKE_C_COMPILER_ID_PLATFORM_CONTENT=#define STRINGIFY_HELPER(X) #X
#define STRINGIFY(X) STRINGIFY_HELPER(X)

/* Identify known platforms by name.  */
#if defined(__linux) || defined(__linux__) || defined(linux)
# define PLATFORM_ID "Linux"

#elif defined(__MSYS__)
# define PLATFORM_ID "MSYS"

#elif defined(__CYGWIN__)
# define PLATFORM_ID "Cygwin"

#elif defined(__MINGW32__)
# define PLATFORM_ID "MinGW"

#elif defined(__APPLE__)
# define PLATFORM_ID "Darwin"

#elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)
# define PLATFORM_ID "Windows"

#elif defined(__FreeBSD__) || defined(__FreeBSD)
# define PLATFORM_ID "FreeBSD"

#elif defined(__NetBSD__) || defined(__NetBSD)
# define PLATFORM_ID "NetBSD"

#elif defined(__OpenBSD__) || defined(__OPENBSD)
# define PLATFORM_ID "OpenBSD"

#elif defined(__sun) || defined(sun)
# define PLATFORM_ID "SunOS"

#elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)
# define PLATFORM_ID "AIX"

#elif defined(__hpux) || defined(__hpux__)
# define PLATFORM_ID "HP-UX"

#elif defined(__HAIKU__)
# define PLATFORM_ID "Haiku"

#elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)
# define PLATFORM_ID "BeOS"

#elif defined(__QNX__) || defined(__QNXNTO__)
# define PLATFORM_ID "QNX"

#elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)
# define PLATFORM_ID "Tru64"

#elif defined(__riscos) || defined(__riscos__)
# define PLATFORM_ID "RISCos"

#elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)
# define PLATFORM_ID "SINIX"

#elif defined(__UNIX_SV__)
# define PLATFORM_ID "UNIX_SV"

#elif defined(__bsdos__)
# define PLATFORM_ID "BSDOS"

#elif defined(_MPRAS) || defined(MPRAS)
# define PLATFORM_ID "MP-RAS"

#elif defined(__osf) || defined(__osf__)
# define PLATFORM_ID "OSF1"

#elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)
# define PLATFORM_ID "SCO_SV"

#elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)
# define PLATFORM_ID "ULTRIX"

#elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)
# define PLATFORM_ID "Xenix"

#elif defined(__WATCOMC__)
# if defined(__LINUX__)
#  define PLATFORM_ID "Linux"

# elif defined(__DOS__)
#  define PLATFORM_ID "DOS"

# elif defined(__OS2__)
#  define PLATFORM_ID "OS2"

# elif defined(__WINDOWS__)
#  define PLATFORM_ID "Windows3x"

# elif defined(__VXWORKS__)
#  define PLATFORM_ID "VxWorks"

# else /* unknown platform */
#  define PLATFORM_ID
# endif

#elif defined(__INTEGRITY)
# if defined(INT_178B)
#  define PLATFORM_ID "Integrity178"

# else /* regular Integrity */
#  define PLATFORM_ID "Integrity"
# endif

#else /* unknown platform */
# define PLATFORM_ID

#endif

/* For windows compilers MSVC and Intel we can determine
   the architecture of the compiler being used.  This is because
   the compilers do not have flags that can change the architecture,
   but rather depend on which compiler is being used
*/
#if defined(_WIN32) && defined(_MSC_VER)
# if defined(_M_IA64)
#  define ARCHITECTURE_ID "IA64"

# elif defined(_M_ARM64EC)
#  define ARCHITECTURE_ID "ARM64EC"

# elif defined(_M_X64) || defined(_M_AMD64)
#  define ARCHITECTURE_ID "x64"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# elif defined(_M_ARM64)
#  define ARCHITECTURE_ID "ARM64"

# elif defined(_M_ARM)
#  if _M_ARM == 4
#   define ARCHITECTURE_ID "ARMV4I"
#  elif _M_ARM == 5
#   define ARCHITECTURE_ID "ARMV5I"
#  else
#   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)
#  endif

# elif defined(_M_MIPS)
#  define ARCHITECTURE_ID "MIPS"

# elif defined(_M_SH)
#  define ARCHITECTURE_ID "SHx"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__WATCOMC__)
# if defined(_M_I86)
#  define ARCHITECTURE_ID "I86"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# if defined(__ICCARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__ICCRX__)
#  define ARCHITECTURE_ID "RX"

# elif defined(__ICCRH850__)
#  define ARCHITECTURE_ID "RH850"

# elif defined(__ICCRL78__)
#  define ARCHITECTURE_ID "RL78"

# elif defined(__ICCRISCV__)
#  define ARCHITECTURE_ID "RISCV"

# elif defined(__ICCAVR__)
#  define ARCHITECTURE_ID "AVR"

# elif defined(__ICC430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__ICCV850__)
#  define ARCHITECTURE_ID "V850"

# elif defined(__ICC8051__)
#  define ARCHITECTURE_ID "8051"

# elif defined(__ICCSTM8__)
#  define ARCHITECTURE_ID "STM8"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__ghs__)
# if defined(__PPC64__)
#  define ARCHITECTURE_ID "PPC64"

# elif defined(__ppc__)
#  define ARCHITECTURE_ID "PPC"

# elif defined(__ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__x86_64__)
#  define ARCHITECTURE_ID "x64"

# elif defined(__i386__)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__TI_COMPILER_VERSION__)
# if defined(__TI_ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__MSP430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__TMS320C28XX__)
#  define ARCHITECTURE_ID "TMS320C28x"

# elif defined(__TMS320C6X__) || defined(_TMS320C6X)
#  define ARCHITECTURE_ID "TMS320C6x"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#else
#  define ARCHITECTURE_ID
#endif

/* Convert integer to decimal digit literals.  */
#define DEC(n)                   \
  ('0' + (((n) / 10000000)%10)), \
  ('0' + (((n) / 1000000)%10)),  \
  ('0' + (((n) / 100000)%10)),   \
  ('0' + (((n) / 10000)%10)),    \
  ('0' + (((n) / 1000)%10)),     \
  ('0' + (((n) / 100)%10)),      \
  ('0' + (((n) / 10)%10)),       \
  ('0' +  ((n) % 10))

/* Convert integer to hex digit literals.  */
#define HEX(n)             \
  ('0' + ((n)>>28 & 0xF)), \
  ('0' + ((n)>>24 & 0xF)), \
  ('0' + ((n)>>20 & 0xF)), \
  ('0' + ((n)>>16 & 0xF)), \
  ('0' + ((n)>>12 & 0xF)), \
  ('0' + ((n)>>8  & 0xF)), \
  ('0' + ((n)>>4  & 0xF)), \
  ('0' + ((n)     & 0xF))

/* Construct a string literal encoding the version number. */
#ifdef COMPILER_VERSION
char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";

/* Construct a string literal encoding the version number components. */
#elif defined(COMPILER_VERSION_MAJOR)
char const info_version[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
  COMPILER_VERSION_MAJOR,
# ifdef COMPILER_VERSION_MINOR
  '.', COMPILER_VERSION_MINOR,
#  ifdef COMPILER_VERSION_PATCH
   '.', COMPILER_VERSION_PATCH,
#   ifdef COMPILER_VERSION_TWEAK
    '.', COMPILER_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct a string literal encoding the internal version number. */
#ifdef COMPILER_VERSION_INTERNAL
char const info_version_internal[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','_',
  'i','n','t','e','r','n','a','l','[',
  COMPILER_VERSION_INTERNAL,']','\0'};
#elif defined(COMPILER_VERSION_INTERNAL_STR)
char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";
#endif

/* Construct a string literal encoding the version number components. */
#ifdef SIMULATE_VERSION_MAJOR
char const info_simulate_version[] = {
  'I', 'N', 'F', 'O', ':',
  's','i','m','u','l','a','t','e','_','v','e','r','s','i','o','n','[',
  SIMULATE_VERSION_MAJOR,
# ifdef SIMULATE_VERSION_MINOR
  '.', SIMULATE_VERSION_MINOR,
#  ifdef SIMULATE_VERSION_PATCH
   '.', SIMULATE_VERSION_PATCH,
#   ifdef SIMULATE_VERSION_TWEAK
    '.', SIMULATE_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";

-- CMAKE_C_COMPILER_ID_RUN=1
-- CMAKE_C_COMPILER_ID_TEST_FLAGS=-c;-Aa;-D__CLASSIC_C__;--target=arm-arm-none-eabi -mcpu=cortex-m3;-c -I__does_not_exist__
-- CMAKE_C_COMPILER_ID_TOOL_MATCH_INDEX=2
-- CMAKE_C_COMPILER_ID_TOOL_MATCH_REGEX=
Ld[^
]*(
[ 	]+[^
]*)*
[ 	]+([^ 	
]+)[^
]*-o[^
]*CompilerIdC/(\./)?(CompilerIdC.(framework|xctest|build/[^ 	
]+)/)?CompilerIdC[ 	
\"]
-- CMAKE_C_COMPILER_ID_VENDORS=IAR
-- CMAKE_C_COMPILER_ID_VENDOR_REGEX_IAR=IAR .+ Compiler
-- CMAKE_C_COMPILER_INIT=NOTFOUND
-- CMAKE_C_COMPILER_LIST=cc;gcc;cl;bcc;xlc;icx;clang
-- CMAKE_C_COMPILER_LOADED=1
-- CMAKE_C_COMPILER_NAMES=cc
-- CMAKE_C_COMPILER_PREDEFINES_COMMAND=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/gcc.exe;-dM;-E;-c;C:/Program Files/JetBrains/CLion 2021.3.4/bin/cmake/win/share/cmake-3.21/Modules/CMakeCXXCompilerABI.cpp
-- CMAKE_C_COMPILER_PRODUCED_FILES=a.exe
-- CMAKE_C_COMPILER_PRODUCED_OUTPUT=
-- CMAKE_C_COMPILER_RANLIB=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/gcc-ranlib.exe
-- CMAKE_C_COMPILER_RANLIB=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/gcc-ranlib.exe
-- CMAKE_C_COMPILER_SYSROOT=
-- CMAKE_C_COMPILER_VERSION=11.2.0
-- CMAKE_C_COMPILER_VERSION_INTERNAL=
-- CMAKE_C_COMPILER_WORKS=TRUE
-- CMAKE_C_COMPILER_WRAPPER=
-- CMAKE_C_COMPILE_FEATURES=c_std_90;c_function_prototypes;c_std_99;c_restrict;c_variadic_macros;c_std_11;c_static_assert;c_std_17;c_std_23
-- CMAKE_C_COMPILE_OBJECT=<CMAKE_C_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -o <OBJECT> -c <SOURCE>
-- CMAKE_C_COMPILE_OPTIONS_CREATE_PCH=-x;c-header;-include;<PCH_HEADER>
-- CMAKE_C_COMPILE_OPTIONS_EXPLICIT_LANGUAGE=-x;c
-- CMAKE_C_COMPILE_OPTIONS_INVALID_PCH=-Winvalid-pch
-- CMAKE_C_COMPILE_OPTIONS_IPO=-flto;-fno-fat-lto-objects
-- CMAKE_C_COMPILE_OPTIONS_PIC=
-- CMAKE_C_COMPILE_OPTIONS_PIE=
-- CMAKE_C_COMPILE_OPTIONS_SYSROOT=--sysroot=
-- CMAKE_C_COMPILE_OPTIONS_USE_PCH=-include;<PCH_HEADER>
-- CMAKE_C_COMPILE_OPTIONS_VISIBILITY=-fvisibility=
-- CMAKE_C_CREATE_ASSEMBLY_SOURCE=<CMAKE_C_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -S <SOURCE> -o <ASSEMBLY_SOURCE>
-- CMAKE_C_CREATE_PREPROCESSED_SOURCE=<CMAKE_C_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -E <SOURCE> > <PREPROCESSED_SOURCE>
-- CMAKE_C_CREATE_SHARED_LIBRARY=<CMAKE_C_COMPILER> <CMAKE_SHARED_LIBRARY_C_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS> -o <TARGET> -Wl,--out-implib,<TARGET_IMPLIB> -Wl,--major-image-version,<TARGET_VERSION_MAJOR>,--minor-image-version,<TARGET_VERSION_MINOR> <OBJECTS> <LINK_LIBRARIES>
-- CMAKE_C_CREATE_SHARED_MODULE=<CMAKE_C_COMPILER> <CMAKE_SHARED_MODULE_C_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_MODULE_CREATE_C_FLAGS> -o <TARGET> -Wl,--major-image-version,<TARGET_VERSION_MAJOR>,--minor-image-version,<TARGET_VERSION_MINOR> <OBJECTS> <LINK_LIBRARIES>
-- CMAKE_C_CREATE_WIN32_EXE=-mwindows
-- CMAKE_C_FLAGS=
-- CMAKE_C_FLAGS_DEBUG=-g
-- CMAKE_C_FLAGS_DEBUG_INIT= -g
-- CMAKE_C_FLAGS_INIT=  
-- CMAKE_C_FLAGS_MINSIZEREL=-Os -DNDEBUG
-- CMAKE_C_FLAGS_MINSIZEREL_INIT= -Os -DNDEBUG
-- CMAKE_C_FLAGS_RELEASE=-O3 -DNDEBUG
-- CMAKE_C_FLAGS_RELEASE_INIT= -O3 -DNDEBUG
-- CMAKE_C_FLAGS_RELWITHDEBINFO=-O2 -g -DNDEBUG
-- CMAKE_C_FLAGS_RELWITHDEBINFO_INIT= -O2 -g -DNDEBUG
-- CMAKE_C_IGNORE_EXTENSIONS=h;H;o;O;obj;OBJ;def;DEF;rc;RC
-- CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/lib/gcc/x86_64-w64-mingw32/11.2.0/include;C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/include;C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/lib/gcc/x86_64-w64-mingw32/11.2.0/include-fixed;C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/x86_64-w64-mingw32/include
-- CMAKE_C_IMPLICIT_LINK_DIRECTORIES=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/lib/gcc/x86_64-w64-mingw32/11.2.0;C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/lib/gcc;C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/x86_64-w64-mingw32/lib;C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/lib
-- CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES=
-- CMAKE_C_IMPLICIT_LINK_LIBRARIES=mingw32;gcc;moldname;mingwex;kernel32;pthread;advapi32;shell32;user32;kernel32;iconv;mingw32;gcc;moldname;mingwex;kernel32
-- CMAKE_C_INFORMATION_LOADED=1
-- CMAKE_C_LIBRARY_ARCHITECTURE=
-- CMAKE_C_LINKER_PREFERENCE=10
-- CMAKE_C_LINKER_WRAPPER_FLAG=-Wl,
-- CMAKE_C_LINKER_WRAPPER_FLAG_SEP=,
-- CMAKE_C_LINK_EXECUTABLE=<CMAKE_C_COMPILER> <FLAGS> <CMAKE_C_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> -Wl,--out-implib,<TARGET_IMPLIB> -Wl,--major-image-version,<TARGET_VERSION_MAJOR>,--minor-image-version,<TARGET_VERSION_MINOR> <LINK_LIBRARIES>
-- CMAKE_C_LINK_OPTIONS_NO_PIE=
-- CMAKE_C_LINK_OPTIONS_PIE=
-- CMAKE_C_OUTPUT_EXTENSION=.obj
-- CMAKE_C_PLATFORM_ID=MinGW
-- CMAKE_C_RESPONSE_FILE_LINK_FLAG=@
-- CMAKE_C_SIMULATE_ID=
-- CMAKE_C_SIMULATE_VERSION=
-- CMAKE_C_SIZEOF_DATA_PTR=8
-- CMAKE_C_SOURCE_FILE_EXTENSIONS=c;m
-- CMAKE_C_STANDARD_COMPUTED_DEFAULT=17
-- CMAKE_C_STANDARD_DEFAULT=17
-- CMAKE_C_STANDARD_LIBRARIES=-lkernel32 -luser32 -lgdi32 -lwinspool -lshell32 -lole32 -loleaut32 -luuid -lcomdlg32 -ladvapi32
-- CMAKE_C_STANDARD_LIBRARIES_INIT=-lkernel32 -luser32 -lgdi32 -lwinspool -lshell32 -lole32 -loleaut32 -luuid -lcomdlg32 -ladvapi32
-- CMAKE_C_USE_RESPONSE_FILE_FOR_INCLUDES=1
-- CMAKE_C_USE_RESPONSE_FILE_FOR_LIBRARIES=1
-- CMAKE_C_USE_RESPONSE_FILE_FOR_OBJECTS=1
-- CMAKE_C_VERBOSE_FLAG=-v
-- CMAKE_C_XCODE_ARCHS=
-- CMAKE_DEPFILE_FLAGS_C=-MD -MT <DEP_TARGET> -MF <DEP_FILE>
-- CMAKE_DEPFILE_FLAGS_CXX=-MD -MT <DEP_TARGET> -MF <DEP_FILE>
-- CMAKE_DLLTOOL=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/dlltool.exe
-- CMAKE_DL_LIBS=
-- CMAKE_EFFECTIVE_SYSTEM_NAME=Windows
-- CMAKE_EXECUTABLE_FORMAT=Unknown
-- CMAKE_EXECUTABLE_SUFFIX=.exe
-- CMAKE_EXE_LINKER_FLAGS=
-- CMAKE_EXE_LINKER_FLAGS_DEBUG=
-- CMAKE_EXE_LINKER_FLAGS_INIT=  
-- CMAKE_EXE_LINKER_FLAGS_MINSIZEREL=
-- CMAKE_EXE_LINKER_FLAGS_RELEASE=
-- CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO=
-- CMAKE_EXE_LINK_DYNAMIC_CXX_FLAGS=-Wl,-Bdynamic
-- CMAKE_EXE_LINK_DYNAMIC_C_FLAGS=-Wl,-Bdynamic
-- CMAKE_EXE_LINK_STATIC_CXX_FLAGS=-Wl,-Bstatic
-- CMAKE_EXE_LINK_STATIC_C_FLAGS=-Wl,-Bstatic
-- CMAKE_EXPORT_COMPILE_COMMANDS=
-- CMAKE_EXTRA_GENERATOR=
-- CMAKE_EXTRA_LINK_EXTENSIONS=.lib
-- CMAKE_FILES_DIRECTORY=/CMakeFiles
-- CMAKE_FIND_LIBRARY_PREFIXES=lib;
-- CMAKE_FIND_LIBRARY_SUFFIXES=.dll.a;.a;.lib
-- CMAKE_GENERATOR=Ninja
-- CMAKE_GENERATOR_INSTANCE=
-- CMAKE_GENERATOR_PLATFORM=
-- CMAKE_GENERATOR_TOOLSET=
-- CMAKE_GNULD_IMAGE_VERSION=-Wl,--major-image-version,<TARGET_VERSION_MAJOR>,--minor-image-version,<TARGET_VERSION_MINOR>
-- CMAKE_GNUtoMS=OFF
-- CMAKE_HOME_DIRECTORY=C:/Users/vincentzhang/MyProjects/HuahuoV2/HuaHuoEngineV2
-- CMAKE_HOST_SYSTEM=Windows-10.0.19044
-- CMAKE_HOST_SYSTEM_NAME=Windows
-- CMAKE_HOST_SYSTEM_PROCESSOR=AMD64
-- CMAKE_HOST_SYSTEM_VERSION=10.0.19044
-- CMAKE_HOST_WIN32=1
-- CMAKE_IMPORT_LIBRARY_PREFIX=lib
-- CMAKE_IMPORT_LIBRARY_SUFFIX=.dll.a
-- CMAKE_INCLUDE_FLAG_C=-I
-- CMAKE_INCLUDE_FLAG_CXX=-I
-- CMAKE_INCLUDE_FLAG_RC=-I 
-- CMAKE_INCLUDE_SYSTEM_FLAG_C=-isystem 
-- CMAKE_INCLUDE_SYSTEM_FLAG_CXX=-isystem 
-- CMAKE_INSTALL_DEFAULT_COMPONENT_NAME=Unspecified
-- CMAKE_INSTALL_PREFIX=C:/Program Files (x86)/HuaHuoEngineV2
-- CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT=1
-- CMAKE_LIBRARY_PATH_FLAG=-L
-- CMAKE_LIBRARY_PATH_TERMINATOR=
-- CMAKE_LINKER=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/ld.exe
-- CMAKE_LINKER=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/ld.exe
-- CMAKE_LINK_DEF_FILE_FLAG=
-- CMAKE_LINK_LIBRARY_FLAG=-l
-- CMAKE_LINK_LIBRARY_SUFFIX=
-- CMAKE_MAJOR_VERSION=3
-- CMAKE_MAKE_PROGRAM=C:/Program Files/JetBrains/CLion 2021.3.4/bin/ninja/win/ninja.exe
-- CMAKE_MATCH_0=ON
-- CMAKE_MATCH_1=
-- CMAKE_MATCH_2=
-- CMAKE_MATCH_6=
-- CMAKE_MATCH_7=
-- CMAKE_MATCH_COUNT=0
-- CMAKE_MINIMUM_REQUIRED_VERSION=3.21
-- CMAKE_MINOR_VERSION=21
-- CMAKE_MODULE_LINKER_FLAGS=
-- CMAKE_MODULE_LINKER_FLAGS_DEBUG=
-- CMAKE_MODULE_LINKER_FLAGS_INIT=  
-- CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL=
-- CMAKE_MODULE_LINKER_FLAGS_RELEASE=
-- CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO=
-- CMAKE_MT=
-- CMAKE_NM=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/nm.exe
-- CMAKE_OBJCOPY=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/objcopy.exe
-- CMAKE_OBJDUMP=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/objdump.exe
-- CMAKE_PARENT_LIST_FILE=C:/Users/vincentzhang/MyProjects/HuahuoV2/HuaHuoEngineV2/CMakeLists.txt
-- CMAKE_PATCH_VERSION=1
-- CMAKE_PCH_EXTENSION=.gch
-- CMAKE_PCH_PROLOGUE=#pragma GCC system_header
-- CMAKE_PLATFORM_INFO_DIR=C:/Users/vincentzhang/MyProjects/HuahuoV2/HuaHuoEngineV2/cmake-build-debug/CMakeFiles/3.21.1
-- CMAKE_PLATFORM_INFO_INITIALIZED=1
-- CMAKE_PROJECT_DESCRIPTION=
-- CMAKE_PROJECT_HOMEPAGE_URL=
-- CMAKE_PROJECT_NAME=HuaHuoEngineV2
-- CMAKE_PROJECT_VERSION=0.01
-- CMAKE_PROJECT_VERSION_MAJOR=0
-- CMAKE_PROJECT_VERSION_MINOR=01
-- CMAKE_PROJECT_VERSION_PATCH=
-- CMAKE_PROJECT_VERSION_TWEAK=
-- CMAKE_RANLIB=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/ranlib.exe
-- CMAKE_RANLIB=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/ranlib.exe
-- CMAKE_RC_COMPILER=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/windres.exe
-- CMAKE_RC_COMPILER=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/windres.exe
-- CMAKE_RC_COMPILER_ARG1=
-- CMAKE_RC_COMPILER_ENV_VAR=RC
-- CMAKE_RC_COMPILER_INIT=windres
-- CMAKE_RC_COMPILER_LIST=windres
-- CMAKE_RC_COMPILER_LOADED=1
-- CMAKE_RC_COMPILER_WORKS=1
-- CMAKE_RC_COMPILE_OBJECT=<CMAKE_RC_COMPILER> -O coff <DEFINES> <INCLUDES> <FLAGS> <SOURCE> <OBJECT>
-- CMAKE_RC_FLAGS=
-- CMAKE_RC_FLAGS_DEBUG=
-- CMAKE_RC_FLAGS_INIT= 
-- CMAKE_RC_FLAGS_MINSIZEREL=
-- CMAKE_RC_FLAGS_RELEASE=
-- CMAKE_RC_FLAGS_RELWITHDEBINFO=
-- CMAKE_RC_FLAG_REGEX=^[-/](D|I)
-- CMAKE_RC_INFORMATION_LOADED=1
-- CMAKE_RC_OUTPUT_EXTENSION=.obj
-- CMAKE_RC_SOURCE_FILE_EXTENSIONS=rc;RC
-- CMAKE_READELF=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/readelf.exe
-- CMAKE_ROOT=C:/Program Files/JetBrains/CLion 2021.3.4/bin/cmake/win/share/cmake-3.21
-- CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS=-shared
-- CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS=-shared
-- CMAKE_SHARED_LIBRARY_C_FLAGS=
-- CMAKE_SHARED_LIBRARY_LINK_C_FLAGS=
-- CMAKE_SHARED_LIBRARY_LINK_DYNAMIC_CXX_FLAGS=-Wl,-Bdynamic
-- CMAKE_SHARED_LIBRARY_LINK_DYNAMIC_C_FLAGS=-Wl,-Bdynamic
-- CMAKE_SHARED_LIBRARY_LINK_STATIC_CXX_FLAGS=-Wl,-Bstatic
-- CMAKE_SHARED_LIBRARY_LINK_STATIC_C_FLAGS=-Wl,-Bstatic
-- CMAKE_SHARED_LIBRARY_PREFIX=lib
-- CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG=
-- CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG_SEP=
-- CMAKE_SHARED_LIBRARY_SUFFIX=.dll
-- CMAKE_SHARED_LINKER_FLAGS=
-- CMAKE_SHARED_LINKER_FLAGS_DEBUG=
-- CMAKE_SHARED_LINKER_FLAGS_INIT=  
-- CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL=
-- CMAKE_SHARED_LINKER_FLAGS_RELEASE=
-- CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO=
-- CMAKE_SHARED_MODULE_CREATE_CXX_FLAGS=-shared
-- CMAKE_SHARED_MODULE_CREATE_C_FLAGS=-shared
-- CMAKE_SHARED_MODULE_LINK_DYNAMIC_CXX_FLAGS=-Wl,-Bdynamic
-- CMAKE_SHARED_MODULE_LINK_DYNAMIC_C_FLAGS=-Wl,-Bdynamic
-- CMAKE_SHARED_MODULE_LINK_STATIC_CXX_FLAGS=-Wl,-Bstatic
-- CMAKE_SHARED_MODULE_LINK_STATIC_C_FLAGS=-Wl,-Bstatic
-- CMAKE_SHARED_MODULE_PREFIX=lib
-- CMAKE_SHARED_MODULE_SUFFIX=.dll
-- CMAKE_SIZEOF_VOID_P=8
-- CMAKE_SKIP_INSTALL_RPATH=NO
-- CMAKE_SKIP_RPATH=NO
-- CMAKE_SOURCE_DIR=C:/Users/vincentzhang/MyProjects/HuahuoV2/HuaHuoEngineV2
-- CMAKE_STATIC_LIBRARY_PREFIX=lib
-- CMAKE_STATIC_LIBRARY_SUFFIX=.a
-- CMAKE_STATIC_LINKER_FLAGS=
-- CMAKE_STATIC_LINKER_FLAGS_DEBUG=
-- CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL=
-- CMAKE_STATIC_LINKER_FLAGS_RELEASE=
-- CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO=
-- CMAKE_STRIP=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin/strip.exe
-- CMAKE_SYSTEM=Windows-10.0.19044
-- CMAKE_SYSTEM_AND_RC_COMPILER_INFO_FILE=C:/Program Files/JetBrains/CLion 2021.3.4/bin/cmake/win/share/cmake-3.21/Modules/Platform/Windows-windres.cmake
-- CMAKE_SYSTEM_INFO_FILE=Platform/Windows
-- CMAKE_SYSTEM_LIBRARY_PATH=C:/Program Files (x86)/HuaHuoEngineV2/bin;C:/Program Files/JetBrains/CLion 2021.3.4/bin/cmake/win/bin;/bin
-- CMAKE_SYSTEM_LOADED=1
-- CMAKE_SYSTEM_NAME=Windows
-- CMAKE_SYSTEM_PREFIX_PATH=C:/Program Files;C:/Program Files (x86);C:/Program Files/JetBrains/CLion 2021.3.4/bin/cmake/win;C:/Program Files (x86)/HuaHuoEngineV2
-- CMAKE_SYSTEM_PROCESSOR=AMD64
-- CMAKE_SYSTEM_SPECIFIC_INFORMATION_LOADED=1
-- CMAKE_SYSTEM_SPECIFIC_INITIALIZE_LOADED=1
-- CMAKE_SYSTEM_VERSION=10.0.19044
-- CMAKE_TWEAK_VERSION=0
-- CMAKE_VERBOSE_MAKEFILE=FALSE
-- CMAKE_VERSION=3.21.1
-- COMPILER_BASENAME=g++.exe
-- CPPFILES=external/baselib/builds/Source/Baselib_Timer.cpp;Runtime/HuaHuoEngine.cpp;Runtime/Components/Transform/Transform.cpp;Runtime/Components/Transform/TransformHierarchy.cpp;Runtime/Components/Transform/TransformChangeDispatch.cpp;Runtime/TypeSystem/Object.cpp;Runtime/TypeSystem/RTTI.cpp;Runtime/TypeSystem/TypeManager.cpp;Runtime/TypeSystem/Type.cpp;Runtime/Utilities/HashFunctions/xxhash.c;Runtime/Utilities/RegisterRuntimeInitializeAndCleanup.cpp;Runtime/Utilities/Word.cpp;Runtime/Utilities/Hash128.cpp;Runtime/BaseClasses/GameObject.cpp;Runtime/BaseClasses/ClassRegistration.cpp;Runtime/BaseClasses/MessageIdentifier.cpp;Runtime/BaseClasses/MessageHandler.cpp;Runtime/BaseClasses/NamedObject.cpp;Runtime/BaseClasses/GameManager.cpp;Runtime/BaseClasses/ManagerContext.cpp;Runtime/BaseClasses/IsPlaying.cpp;Runtime/Components/BaseComponent.cpp;Runtime/Serialize/PersistentManager.cpp;Runtime/Serialize/PathNamePersistentManager.cpp;Runtime/Serialize/Remapper.cpp;Runtime/Serialize/SerializedFile.cpp;Runtime/Serialize/TransferFunctions/StreamedBinaryRead.cpp;Runtime/Serialize/TransferFunctions/StreamedBinaryWrite.cpp;Runtime/Serialize/TransferFunctions/TransferBase.cpp;Runtime/Serialize/SerializationCaching/CacheWriterBase.cpp;Runtime/Serialize/SerializationCaching/CacheReaderBase.cpp;Runtime/Serialize/SerializationCaching/CachedReader.cpp;Runtime/Serialize/SerializationCaching/CachedWriter.cpp;Runtime/Serialize/SerializationCaching/MemoryCacherReadBlocks.cpp;Runtime/Export/Scripting/GameObjectExport.cpp;Runtime/Containers/CommonString.cpp;Runtime/Containers/GrowableBuffer.cpp;Runtime/Math/Simd/vec-svd.cpp;Runtime/Math/Quaternionf.cpp;Runtime/Math/Vector3f.cpp;Runtime/Math/Vector4f.cpp;Runtime/Math/Vector2f.cpp;Runtime/Math/Matrix3x3.cpp;Runtime/Math/Matrix4x4.cpp;Runtime/Math/Matrix4x4_REF.cpp;Runtime/Math/FloatConversion.cpp;Runtime/Misc/GameObjectUtility.cpp;Runtime/Logging/LogAssert.cpp;Runtime/Memory/MemoryMacros.cpp;Runtime/Memory/BatchAllocator.cpp;Runtime/Memory/MemoryManager.cpp;Runtime/SceneManager/HuaHuoScene.cpp;Runtime/SceneManager/SceneManager.cpp;Runtime/Export/Events/ScriptEventManager.cpp;Runtime/GameCode/Behaviour.cpp;Runtime/Input/TimeManager.cpp;Runtime/Input/TargetFrameRate.cpp;Runtime/Shaders/ShaderPassContext.cpp;Runtime/Shaders/ShaderPropertySheet.cpp;Runtime/Profiler/TimeHelper.cpp;external/baselib/builds/Source/Assert.cpp;Runtime/BaseClasses/ManagerContextLoading.cpp;Runtime/Shaders/ShaderTags.cpp;Runtime/Job/Jobs.cpp;Runtime/Job/JobBatchDispatcher.cpp;Runtime/Geometry/AABB.cpp;Runtime/Geometry/BoundingUtils.cpp;Runtime/Geometry/Intersection.cpp;Runtime/Geometry/TriTriIntersect.cpp;Runtime/Job/BlockRangeJob.cpp;Runtime/Utilities/EnumTraits.cpp;Runtime/Editor/SceneView.cpp;src/ObjectStore.cpp;src/Shapes/BaseShape.cpp;src/Shapes/LineShape.cpp;Runtime/Editor/SceneInspector.cpp;Runtime/Editor/Utility/SceneRootTransformArray.cpp
-- EXTRA_INCLUDE_DIR=Runtime
-- FIND_PACKAGE_MESSAGE_DETAILS_OpenGL=[opengl32][c ][v()]
-- HuaHuoEditor=ON
-- HuaHuoEngineV2_BINARY_DIR=C:/Users/vincentzhang/MyProjects/HuahuoV2/HuaHuoEngineV2/cmake-build-debug
-- HuaHuoEngineV2_DESCRIPTION=
-- HuaHuoEngineV2_HOMEPAGE_URL=
-- HuaHuoEngineV2_IS_TOP_LEVEL=ON
-- HuaHuoEngineV2_SOURCE_DIR=C:/Users/vincentzhang/MyProjects/HuahuoV2/HuaHuoEngineV2
-- HuaHuoEngineV2_VERSION=0.01
-- HuaHuoEngineV2_VERSION_MAJOR=0
-- HuaHuoEngineV2_VERSION_MINOR=01
-- HuaHuoEngineV2_VERSION_PATCH=
-- HuaHuoEngineV2_VERSION_TWEAK=
-- MINGW=1
-- MSVC_CXX_ARCHITECTURE_ID=
-- MSVC_C_ARCHITECTURE_ID=
-- OPENGL_FOUND=TRUE
-- OPENGL_GLU_FOUND=YES
-- OPENGL_LIBRARIES=opengl32;glu32
-- OPENGL_LIBRARY=opengl32;glu32
-- OPENGL_XMESA_FOUND=NO
-- OPENGL_gl_LIBRARY=opengl32
-- OPENGL_glu_LIBRARY=glu32
-- OpenGL_EGL_FOUND=FALSE
-- OpenGL_FOUND=TRUE
-- OpenGL_GLX_FOUND=FALSE
-- OpenGL_OpenGL_FOUND=TRUE
-- PRESET_CMAKE_SYSTEM_NAME=FALSE
-- PROJECT_BINARY_DIR=C:/Users/vincentzhang/MyProjects/HuahuoV2/HuaHuoEngineV2/cmake-build-debug
-- PROJECT_DESCRIPTION=
-- PROJECT_HOMEPAGE_URL=
-- PROJECT_IS_TOP_LEVEL=ON
-- PROJECT_NAME=HuaHuoEngineV2
-- PROJECT_SOURCE_DIR=C:/Users/vincentzhang/MyProjects/HuahuoV2/HuaHuoEngineV2
-- PROJECT_VERSION=0.01
-- PROJECT_VERSION_MAJOR=0
-- PROJECT_VERSION_MINOR=01
-- PROJECT_VERSION_PATCH=
-- PROJECT_VERSION_TWEAK=
-- RUN_CONFIGURE=ON
-- TARGETNAME=TestHuaHuoEngine
-- WIN32=1
-- _CMAKE_CXX_IPO_MAY_BE_SUPPORTED_BY_COMPILER=YES
-- _CMAKE_CXX_IPO_SUPPORTED_BY_CMAKE=YES
-- _CMAKE_CXX_PIE_MAY_BE_SUPPORTED_BY_LINKER=NO
-- _CMAKE_C_IPO_MAY_BE_SUPPORTED_BY_COMPILER=YES
-- _CMAKE_C_IPO_SUPPORTED_BY_CMAKE=YES
-- _CMAKE_C_PIE_MAY_BE_SUPPORTED_BY_LINKER=NO
-- _CMAKE_INSTALL_DIR=C:/Program Files/JetBrains/CLion 2021.3.4/bin/cmake/win
-- _CMAKE_RC_COMPILER_NAME_WE=windres
-- _CMAKE_TOOLCHAIN_LOCATION=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin
-- _INCLUDED_FILE=C:/Program Files/JetBrains/CLion 2021.3.4/bin/cmake/win/share/cmake-3.21/Modules/Platform/Windows-GNU-CXX.cmake
-- _INCLUDED_SYSTEM_INFO_FILE=C:/Program Files/JetBrains/CLion 2021.3.4/bin/cmake/win/share/cmake-3.21/Modules/Platform/Windows.cmake
-- _IN_TC=0
-- _SET_CMAKE_CXX_COMPILER_ARCHITECTURE_ID=
-- _SET_CMAKE_CXX_COMPILER_SYSROOT=
-- _SET_CMAKE_C_COMPILER_ARCHITECTURE_ID=
-- _SET_CMAKE_C_COMPILER_SYSROOT=
-- __COMPILER_CMAKE_COMMON_COMPILER_MACROS=1
-- __COMPILER_GNU=1
-- __WINDOWS_GNU=1
-- __WINDOWS_GNU_LD_RESPONSE=1
-- __WINDOWS_PATHS_INCLUDED=1
-- __gcc_hints=C:/Program Files/JetBrains/CLion 2021.3.4/bin/mingw/bin
-- __lto_flags=-flto;-fno-fat-lto-objects
-- __pch_header_C=c-header
-- __pch_header_CXX=c++-header
-- __pch_header_OBJC=objective-c-header
-- __pch_header_OBJCXX=objective-c++-header
-- __version_x=11
-- __version_x_y=11.2
-- _help=GNU ld (GNU Binutils) 2.37

-- _ver=g++.exe (GCC) 11.2.0
Copyright (C) 2021 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.


-- print_all_variables------------------------------------------}
-- Configuring done
-- Generating done
-- Build files have been written to: C:/Users/vincentzhang/MyProjects/HuahuoV2/HuaHuoEngineV2/cmake-build-debug
