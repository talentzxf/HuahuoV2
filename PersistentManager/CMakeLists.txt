macro(print_all_variables)
    message(STATUS "print_all_variables------------------------------------------{")
    get_cmake_property(_variableNames VARIABLES)
    foreach (_variableName ${_variableNames})
        message(STATUS "${_variableName}=${${_variableName}}")
    endforeach ()
    message(STATUS "print_all_variables------------------------------------------}")
endmacro()
print_all_variables()

cmake_minimum_required(VERSION 3.21)
project(PersistentManager VERSION 0.1)
configure_file(src/PersistentManagerConfig.h.in PersistentManagerConfig.h)

list(APPEND CPPFILES src/PersistentManager.cpp)
list(APPEND CPPFILES src/Components/Transform/Transform.cpp)
list(APPEND CPPFILES src/Components/Transform/TransformHierarchy.cpp)
list(APPEND CPPFILES src/Components/Transform/TransformChangeDispatch.cpp)
list(APPEND CPPFILES src/TypeSystem/Object.cpp)
list(APPEND CPPFILES src/TypeSystem/RTTI.cpp)
list(APPEND CPPFILES src/TypeSystem/TypeManager.cpp)
list(APPEND CPPFILES src/Utilities/HashFunctions/xxhash.c)
list(APPEND CPPFILES src/Utilities/RegisterRuntimeInitializeAndCleanup.cpp)
list(APPEND CPPFILES src/BaseClasses/ClassRegistration.cpp)
list(APPEND CPPFILES src/Components/BaseComponent.cpp)
list(APPEND CPPFILES src/Serialize/TransferFunctions/StreamedBinaryRead.cpp)
list(APPEND CPPFILES src/Serialize/TransferFunctions/StreamedBinaryWrite.cpp)
list(APPEND CPPFILES src/Serialize/TransferFunctions/TransferBase.cpp)
list(APPEND CPPFILES src/Serialize/SerializationCaching/CacheWriterBase.cpp)
list(APPEND CPPFILES src/Serialize/SerializationCaching/CacheReaderBase.cpp)
list(APPEND CPPFILES src/Serialize/SerializationCaching/CachedReader.cpp)
list(APPEND CPPFILES src/Serialize/SerializationCaching/CachedWriter.cpp)
list(APPEND CPPFILES src/Containers/CommonString.cpp)
list(APPEND CPPFILES src/Math/Quaternionf.cpp)

set(CMAKE_CXX_STANDARD 23)
set(EXTRA_INCLUDE_DIR src)

set(TARGETNAME PersistentManager)
if (CMAKE_CXX_PLATFORM_ID STREQUAL "emscripten")
    list(APPEND CPPFILES src/PersistentManagerWrapper.cpp)
    add_executable(${TARGETNAME} ${CPPFILES})
else ()
    set(TARGETNAME TestPersistentManager)
    add_executable(TestPersistentManager test/main.cpp ${CPPFILES})
endif ()

target_include_directories(${TARGETNAME} PUBLIC "${PROJECT_BINARY_DIR}" ${EXTRA_INCLUDE_DIR})