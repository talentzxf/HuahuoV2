macro(print_all_variables)
    message(STATUS "print_all_variables------------------------------------------{")
    get_cmake_property(_variableNames VARIABLES)
    foreach (_variableName ${_variableNames})
        message(STATUS "${_variableName}=${${_variableName}}")
    endforeach ()
    message(STATUS "print_all_variables------------------------------------------}")
endmacro()

cmake_minimum_required(VERSION 3.21)
project(HuaHuoEngine VERSION 0.01)
configure_file(src/HuaHuoEngineConfig.h.in HuaHuoEngineConfig.h)

option(HuaHuoEditor "Compile HuaHuoEditor" ON)

if(${HuaHuoEditor} MATCHES "ON")
    add_compile_definitions(HUAHUO_EDITOR=1)
endif()

include_directories(external/Khronos)
include_directories(external/baselib/builds)
include_directories(external/baselib/builds/Include)
include_directories(external/Umbra/source/common)
include_directories(external/Umbra/source)
include_directories(external/Umbra/interface)
include_directories(PlatformDependent/WebGL/Source/Threads)
include_directories(external/glew-1.13.0/include/)

list(APPEND CPPFILES external/baselib/builds/Source/Baselib_Timer.cpp)
list(APPEND CPPFILES src/HuaHuoEngine.cpp)
list(APPEND CPPFILES src/Components/Transform/Transform.cpp)
list(APPEND CPPFILES src/Components/Transform/TransformHierarchy.cpp)
list(APPEND CPPFILES src/Components/Transform/TransformChangeDispatch.cpp)
list(APPEND CPPFILES src/TypeSystem/Object.cpp)
list(APPEND CPPFILES src/TypeSystem/RTTI.cpp)
list(APPEND CPPFILES src/TypeSystem/TypeManager.cpp)
list(APPEND CPPFILES src/TypeSystem/Type.cpp)
list(APPEND CPPFILES src/Utilities/HashFunctions/xxhash.c)
list(APPEND CPPFILES src/Utilities/RegisterRuntimeInitializeAndCleanup.cpp)
list(APPEND CPPFILES src/Utilities/Word.cpp)
list(APPEND CPPFILES src/Utilities/Hash128.cpp)
list(APPEND CPPFILES src/BaseClasses/GameObject.cpp)
list(APPEND CPPFILES src/BaseClasses/ClassRegistration.cpp)
list(APPEND CPPFILES src/BaseClasses/MessageIdentifier.cpp)
list(APPEND CPPFILES src/BaseClasses/MessageHandler.cpp)
list(APPEND CPPFILES src/BaseClasses/NamedObject.cpp)
list(APPEND CPPFILES src/BaseClasses/GameManager.cpp)
list(APPEND CPPFILES src/BaseClasses/ManagerContext.cpp)
list(APPEND CPPFILES src/BaseClasses/IsPlaying.cpp)
list(APPEND CPPFILES src/Components/BaseComponent.cpp)
list(APPEND CPPFILES src/Serialize/PersistentManager.cpp)
list(APPEND CPPFILES src/Serialize/PathNamePersistentManager.cpp)
list(APPEND CPPFILES src/Serialize/Remapper.cpp)
list(APPEND CPPFILES src/Serialize/SerializedFile.cpp)
list(APPEND CPPFILES src/Serialize/TransferFunctions/StreamedBinaryRead.cpp)
list(APPEND CPPFILES src/Serialize/TransferFunctions/StreamedBinaryWrite.cpp)
list(APPEND CPPFILES src/Serialize/TransferFunctions/TransferBase.cpp)
list(APPEND CPPFILES src/Serialize/SerializationCaching/CacheWriterBase.cpp)
list(APPEND CPPFILES src/Serialize/SerializationCaching/CacheReaderBase.cpp)
list(APPEND CPPFILES src/Serialize/SerializationCaching/CachedReader.cpp)
list(APPEND CPPFILES src/Serialize/SerializationCaching/CachedWriter.cpp)
list(APPEND CPPFILES src/Serialize/SerializationCaching/MemoryCacherReadBlocks.cpp)
list(APPEND CPPFILES src/Export/Scripting/GameObjectExport.cpp)
list(APPEND CPPFILES src/Containers/CommonString.cpp)
list(APPEND CPPFILES src/Containers/GrowableBuffer.cpp)
list(APPEND CPPFILES src/Math/Simd/vec-svd.cpp)
list(APPEND CPPFILES src/Math/Quaternionf.cpp)
list(APPEND CPPFILES src/Math/Vector3f.cpp)
list(APPEND CPPFILES src/Math/Vector4f.cpp)
list(APPEND CPPFILES src/Math/Vector2f.cpp)
list(APPEND CPPFILES src/Math/Matrix3x3.cpp)
list(APPEND CPPFILES src/Math/Matrix4x4.cpp)
list(APPEND CPPFILES src/Math/Matrix4x4_REF.cpp)
list(APPEND CPPFILES src/Math/FloatConversion.cpp)
list(APPEND CPPFILES src/Misc/GameObjectUtility.cpp)
list(APPEND CPPFILES src/Logging/LogAssert.cpp)
list(APPEND CPPFILES src/Memory/MemoryMacros.cpp)
list(APPEND CPPFILES src/Memory/BatchAllocator.cpp)
list(APPEND CPPFILES src/Memory/MemoryManager.cpp)
list(APPEND CPPFILES src/SceneManager/HuaHuoScene.cpp)
list(APPEND CPPFILES src/SceneManager/SceneManager.cpp)
list(APPEND CPPFILES src/Export/Events/ScriptEventManager.cpp)
list(APPEND CPPFILES src/Export/Rendering/RenderPipeline.cpp)
list(APPEND CPPFILES src/Graphics/Mesh/Mesh.cpp)
list(APPEND CPPFILES src/Graphics/Mesh/VertexData.cpp)
list(APPEND CPPFILES src/Graphics/Mesh/SharedMeshData.cpp)
list(APPEND CPPFILES src/Graphics/MeshRenderer.cpp)
list(APPEND CPPFILES src/Camera/BaseRenderer.cpp)
list(APPEND CPPFILES src/Camera/RendererScene.cpp)
list(APPEND CPPFILES src/Camera/Camera.cpp)
list(APPEND CPPFILES src/Camera/SceneNode.cpp)
list(APPEND CPPFILES src/Camera/CameraStack.cpp)
list(APPEND CPPFILES src/Camera/RenderManager.cpp)
list(APPEND CPPFILES src/GfxDevice/GfxDevice.cpp)
list(APPEND CPPFILES src/GameCode/Behaviour.cpp)
list(APPEND CPPFILES src/Input/TimeManager.cpp)
list(APPEND CPPFILES src/Input/TargetFrameRate.cpp)
list(APPEND CPPFILES src/Shaders/ShaderPassContext.cpp)
list(APPEND CPPFILES src/Shaders/ShaderPropertySheet.cpp)
list(APPEND CPPFILES src/Graphics/ScriptableRenderLoop/ScriptableRenderContext.cpp)
list(APPEND CPPFILES src/Export/Rendering/RenderPipelineManager.cpp)
list(APPEND CPPFILES src/Profiler/TimeHelper.cpp)
list(APPEND CPPFILES external/baselib/builds/Source/Assert.cpp)
list(APPEND CPPFILES src/Camera/GraphicsSettings.cpp)
list(APPEND CPPFILES src/GfxDevice/GfxDeviceSetup.cpp)
list(APPEND CPPFILES src/GfxDevice/opengles/GfxDeviceGLES.cpp)
list(APPEND CPPFILES src/BaseClasses/ManagerContextLoading.cpp)
list(APPEND CPPFILES src/Graphics/ScriptableRenderLoop/ScriptableDrawRenderers.cpp)
list(APPEND CPPFILES src/Shaders/ShaderTags.cpp)
list(APPEND CPPFILES src/Graphics/CommandBuffer/RenderingCommandBuffer.cpp)
list(APPEND CPPFILES src/Graphics/ScriptableRenderLoop/ScritableCulling.cpp)
list(APPEND CPPFILES src/Graphics/Renderer.cpp)
list(APPEND CPPFILES src/Job/Jobs.cpp)
list(APPEND CPPFILES src/Job/JobBatchDispatcher.cpp)
list(APPEND CPPFILES src/Geometry/AABB.cpp)
list(APPEND CPPFILES src/Geometry/BoundingUtils.cpp)
list(APPEND CPPFILES src/Geometry/Intersection.cpp)
list(APPEND CPPFILES src/Geometry/TriTriIntersect.cpp)
list(APPEND CPPFILES src/Camera/RenderNodeQueue.cpp)
list(APPEND CPPFILES src/Camera/RenderNode.cpp)
list(APPEND CPPFILES src/Camera/SharedRendererScene.cpp)
list(APPEND CPPFILES src/Job/BlockRangeJob.cpp)
list(APPEND CPPFILES src/Graphics/ScriptableRenderLoop/ScriptableCulling.cpp)
list(APPEND CPPFILES src/Camera/CameraUtil.cpp)
list(APPEND CPPFILES src/Camera/CullResults.cpp)
list(APPEND CPPFILES src/Shaders/Material.cpp)
list(APPEND CPPFILES src/Utilities/EnumTraits.cpp)
list(APPEND CPPFILES src/Camera/SharedRendererData.cpp)
list(APPEND CPPFILES src/Editor/SceneView.cpp)
list(APPEND CPPFILES src/Graphics/2D/Canvas2DRenderer.cpp)
list(APPEND CPPFILES src/Graphics/2D/Objects2D/Base2DObject.cpp)
list(APPEND CPPFILES src/Graphics/2D/Objects2D/Line2D.cpp)
list(APPEND CPPFILES src/Camera/CameraTypes.h src/Shaders/GraphicsCaps.cpp)
list(APPEND CPPFILES src/GfxDevice/opengles/GraphicsCapsGLES.cpp)
list(APPEND CPPFILES src/Graphics/RenderSurface.cpp)
list(APPEND CPPFILES src/GfxDevice/opengles/ApiGLES.cpp)
list(APPEND CPPFILES src/GfxDevice/opengles/ApiFuncGLES.cpp)
list(APPEND CPPFILES src/GfxDevice/opengles/GfxContextGLES.cpp)
list(APPEND CPPFILES src/Shaders/ShaderImpl/ShaderTextureProperty.cpp)
list(APPEND CPPFILES src/Shaders/ShaderImpl/ShaderUtilities.cpp)
list(APPEND CPPFILES src/GfxDevice/opengles/GfxDeviceCreateGLES.cpp)
list(APPEND CPPFILES src/GfxDevice/opengles/DeviceStateGLES.cpp)
list(APPEND CPPFILES src/GfxDevice/opengles/ExtensionGLES.cpp)
list(APPEND CPPFILES src/Graphics/Image.cpp)
list(APPEND CPPFILES src/Graphics/GraphicsHelper.cpp)
list(APPEND CPPFILES src/Shaders/GraphicsCapsScriptBinding.cpp)
list(APPEND CPPFILES src/Graphics/Format.cpp)
list(APPEND CPPFILES src/GfxDevice/opengles/FrameBufferGLES.cpp)
list(APPEND CPPFILES src/GfxDevice/TextureIdMap.cpp)
list(APPEND CPPFILES src/Graphics/ColorGamut.cpp)
list(APPEND CPPFILES src/GfxDevice/BuiltinShaderParams.cpp)
list(APPEND CPPFILES  src/Shaders/ShaderKeyWords.cpp)
# list(APPEND CPPFILES external/Umbra/umbra.cpp)

if(${HuaHuoEditor} MATCHES "ON")
    list(APPEND CPPFILES src/Editor/SceneInspector.cpp)
    list(APPEND CPPFILES src/Editor/Utility/SceneRootTransformArray.cpp)
endif()

set(CMAKE_CXX_STANDARD 23)
set(EXTRA_INCLUDE_DIR src)

set(TARGETNAME HuaHuoEngine)
add_compile_definitions(PLATFORM_SUPPORTS_OPENGL_UNIFIED=1)
add_compile_definitions(GFX_SUPPORTS_OPENGL_UNIFIED=1)

# Compile external dependencies
add_subdirectory (external)

if (CMAKE_CXX_PLATFORM_ID STREQUAL "emscripten")
    add_compile_definitions(WEB_ENV=1)
    add_compile_definitions(PLATFORM_WEBGL=1)
    include_directories(PlatformDependent/WebGL/External/baselib/builds/Include)
    list(APPEND CPPFILES src/HuaHuoEngineWrapper.cpp)
    list(APPEND CPPFILES PlatformDependent/WebGL/External/baselib/builds/Source/Baselib_Timer_Emscripten.cpp)
    add_compile_options(-Wno-deprecated-enum-enum-conversion)
    add_executable(${TARGETNAME} ${CPPFILES})
else ()
    #    include_directories("C:\\Users\\vincentzhang\\OpenSource\\emsdk\\upstream\\emscripten\\system\\include\\")
    set(TARGETNAME TestHuaHuoEngine)

#    add_compile_definitions(PLATFORM_WIN=1)
    add_compile_options(-Wno-deprecated-enum-enum-conversion)
    include_directories(PlatformDependent/Win/External/baselib/builds/Include)



    add_definitions(
            -DTW_STATIC
            -DTW_NO_LIB_PRAGMA
            -DTW_NO_DIRECT3D
            -DGLEW_STATIC
            -D_CRT_SECURE_NO_WARNINGS
    )

    add_executable(TestHuaHuoEngine ${CPPFILES} test/main.cpp)

#    set(SDL2_DIR ./external/SDL2-2.0.22)
    find_package(OPENGL REQUIRED)
    print_all_variables()

    set(ALL_LIBS
            ${OPENGL_LIBRARY}
            GLEW_1130
            )

    target_link_libraries(TestHuaHuoEngine ${ALL_LIBS})
endif ()

target_include_directories(${TARGETNAME} PUBLIC "${PROJECT_BINARY_DIR}" ${EXTRA_INCLUDE_DIR})